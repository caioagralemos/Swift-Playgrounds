bplist00ﬂz	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÄÄÅÇÉÑÖÜÄáàÄâÄäãÄåçÄéèêëíìîïñÄÄÄóòôöõÄúùÄûü†°¢£§Ä•¶ß®©™´Ä¨≠ÆØÄ∞±≤≥¥µ∂∑∏π∫ªºΩÄæøÄÄ¿¡ÄÄ¬√ÄƒÄ≈∆ÄÄÄ«»… ÄÄÀÄÃÕŒœ–—“Ä”Äà‘’_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page17..Paragraph38_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page26..CodeBlock13_aGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page9..UnorderedList0..Paragraph23_RGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page15..Paragraph33_RGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page11..Paragraph26_KGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page6..title_LGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page13..title_KGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page8..title_nGuideBook..Guide0..StepOrganizing with grids..LearningCenterContent..GuideButtonStart Walkthrough..description_aGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page9..UnorderedList0..Paragraph24_PGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page1..Paragraph8_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page18..Paragraph40_NGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Paragraph34_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page21..Paragraph44_PGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page22..title_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page16..Paragraph35_3GuideBook..Guide0..StepOrganizing with grids..title_PGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page18..title_UGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page20..CodeBlock9_KGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page2..title_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page25..Paragraph54_RGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page14..Paragraph30_LGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page29..title_RGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page12..Paragraph27_DGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..title_LGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page12..title_QGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page4..Paragraph15_OGuideBook..Guide0..StepOrganizing with grids..LearningCenterContent..Paragraph2_PGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page1..Paragraph9_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page18..Paragraph39_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page23..Paragraph48_hGuideBook..Guide0..StepOrganizing with grids..LearningCenterContent..GuideButtonStart Walkthrough..title_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page24..Paragraph51_QGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page6..Paragraph17_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page19..Paragraph41_LGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page14..title_KGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page5..title_PGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page23..title_RGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page13..Paragraph28_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page22..Paragraph45_JGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Paragraph20_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page30..Paragraph64_OGuideBook..Guide0..StepOrganizing with grids..LearningCenterContent..Paragraph4_PGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page19..title_PGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page0..Paragraph6_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page28..Paragraph60_KGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page1..title_PGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page6..CodeBlock5_UGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page19..CodeBlock7_DGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..title_UGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page16..CodeBlock6_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page29..Paragraph61_PGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page0..Paragraph7_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page27..Paragraph58_LGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page15..title_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page27..CodeBlock14_JGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Paragraph50_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page16..Paragraph36_QGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page2..Paragraph10_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page26..Paragraph55_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page28..Paragraph59_IGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Paragraph5_KGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page0..title_QGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page8..Paragraph21_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page28..CodeBlock15_UGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page19..CodeBlock8_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page20..Paragraph42_LGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page24..title_RGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page14..Paragraph31_QGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page5..Paragraph16_QGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page3..Paragraph13_PGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page1..CodeBlock1_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page23..Paragraph49_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page29..CodeBlock16_OGuideBook..Guide0..StepOrganizing with grids..LearningCenterContent..Paragraph1_QGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page7..Paragraph18_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page24..Paragraph52_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page17..Paragraph37_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page22..Paragraph46_RGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page15..Paragraph32_PGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page5..CodeBlock4_RGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page13..Paragraph29_PGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page20..title_QGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page2..Paragraph11_HGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..title_PGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page16..title_KGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page4..title_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page25..Paragraph53_OGuideBook..Guide0..StepOrganizing with grids..LearningCenterContent..Paragraph3_LGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page25..title_LGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page30..title_QGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page3..Paragraph14_:GuideBook..WelcomeMessageOrganizing with grids..Paragraph0_LGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page27..title_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page29..Paragraph62_LGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page10..title_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page23..Paragraph47_QGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page7..Paragraph19_KGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page7..title_KGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page9..title_PGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page21..title_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page30..Paragraph63_PGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page0..CodeBlock0_QGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page2..Paragraph12_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page26..Paragraph56_LGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page26..title_PGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page17..title_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page20..Paragraph43_KGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page3..title_QGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page9..Paragraph22_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page25..CodeBlock12_DGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..title_RGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page10..Paragraph25_GuideBook..title_PGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page4..CodeBlock3_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page23..CodeBlock11_LGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page28..title_PGuideBook..Guide0..StepOrganizing with grids..TaskcreateAGrid..Page2..CodeBlock2_LGuideBook..Guide0..StepOrganizing with grids..TaskcontentView..Page11..title_5GuideBook..WelcomeMessageOrganizing with grids..title_VGuideBook..Guide0..StepOrganizing with grids..TaskadjustLazyVGrid..Page21..CodeBlock10_RGuideBook..Guide0..StepOrganizing with grids..TaskselectColor..Page27..Paragraph57o9 F i r s t ,   t h e y  r e   [ f i x e d ] ( d o c : / / c o m . a p p l e . d o c u m e n t a t i o n / d o c u m e n t a t i o n / s w i f t u i / g r i d i t e m / s i z e - s w i f t . e n u m / f i x e d ( _ : ) )   i n   s i z e .   I f   y o u   e x p a n d   t h e   p r e v i e w ,   t h e y   d o n  t   e x p a n d   a n d   c o n t r a c t   t o   a d j u s t   f o r   m o r e   o r   l e s s   s p a c e .   H o w   r i g i d   a n d   f i x e d   o f   t h e m !   T h i s   i s   b e c a u s e   y o u   u s e d   ` . f i x e d ( _ : ) `   t o   d e t e r m i n e   t h e   g r i d   i t e m  s   s i z e ._mButton {
    //#-learning-code-snippet(buttonAction)
} label: {
    //#-learning-code-snippet(buttonLabel)
}
o± I t  s    l a z y   ÿ>›•   b e c a u s e   t h e   g r i d   d o e s n  t   c r e a t e   t h e   i n d i v i d u a l   g r i d   i t e m s   u n t i l   t h e y   a r e   n e e d e d .   T h i s   m i g h t   o c c u r   w h e n   t h e r e   a r e   m o r e   g r i d   i t e m s   t h a n   t h e   a p p   c a n   d i s p l a y   a t   o n c e ._QTa-da! The code creates a lovely grid of colored rectangles with rounded corners._ŸThe grid might contain more items than it can display at one time, so the code wraps it in a [ScrollView](doc://com.apple.documentation/documentation/swiftui/scrollview) to scroll the content vertically, if necessary.P_AX description for button_LInstead of creating each row individually, like in `Grid`, you simply tell `LazyVGrid` how many columns to use, and it determines the number of rows based on the number of views you pass in. This makes a `LazyVGrid` excellent at populating views from a [collection](glossary://collection) of data, like an [array](glossary://array)._^This first `GridRow` displays three views, each a different `Color` value. How pretty is that?oﬂ I f   y o u   p r o v i d e   n o   a r g u m e n t s   t o   ` . f l e x i b l e ( ) ` ,   t h e   g r i d   i t e m s   a r e n  t   l i m i t e d   t o   h o w   b i g   o r   s m a l l   t h e y   c a n   g e t .   H o w e v e r ,   y o u   c a n   c o n s t r a i n   t h e   s i z e   t o   a   s m a l l e s t   a n d   l a r g e s t   v a l u e   u s i n g   t h e   ` m i n i m u m `   a n d   ` m a x i m u m `   p a r a m e t e r s ._;Fine-tune how the columns of your `LazyVGrid` are laid out._JNext, swap out the `columns` argument in `LazyVGrid` with `customColumns`:_ÆTo adjust a `LazyVGrid`, customize the array of `GridItem` [instances](glossary://instance). This is what determines the number, size, and spacing of the columns of the grid._Organizing with grids_slet customColumns = [GridItem(.fixed(75)), GridItem(.fixed(100)), GridItem(.flexible(minimum: 125, maximum: 250))]
oÁ B e c a u s e   y o u  l l   w a n t   t h i s   c o l o r   t o   h a v e   a n   e f f e c t   o n   y o u r   [ U I ] ( g l o s s a r y : / / u s e r % 2 0 i n t e r f a c e ) ,   y o u  l l   d e f i n e   i t   a s   a   [ s t a t e   p r o p e r t y ] ( g l o s s a r y : / / s t a t e % 2 0 p r o p e r t y )      o n e   t h a t   S w i f t U I   c a n   u s e   t o   u p d a t e   y o u r   v i e w s   w h e n   i t s   v a l u e   c h a n g e s :_tInside the `LazyVGrid`, you create each view for the grid to display using a special type of loop, called `ForEach`._„Inside the `ScrollView`, you create your [LazyVGrid](doc://com.apple.documentation/documentation/swiftui/lazyvgrid) and pass in an [argument](glossary://argument) for `columns` to determine how many columns show up in the grid._"Create and customize a simple grid_´You can adjust the spacing and alignment of the grid using `alignment`, `horizontalSpacing`, and `verticalSpacing` parameters of the grid. Try adding those parameters now:oÎ I n   t h i s   s a m p l e ,   y o u  l l   l e a r n   h o w   t o   a r r a n g e   c o n t e n t   u s i n g   t w o   c o m m o n   t y p e s   o f   g r i d   v i e w s :     [ G r i d ] ( d o c : / / c o m . a p p l e . d o c u m e n t a t i o n / d o c u m e n t a t i o n / s w i f t u i / g r i d )   a n d   [ L a z y V G r i d ] ( d o c : / / c o m . a p p l e . d o c u m e n t a t i o n / d o c u m e n t a t i o n / s w i f t u i / l a z y v g r i d ) ._mYou can add as many rows to your grid as you want. Try adding a second `GridRow` to see how the grid changes:_Instead of making the grid items fixed in size, you could make them [flexible](doc://com.apple.documentation/documentation/swiftui/griditem/size-swift.enum/flexible(minimum:maximum:)) so they adjust in size to the amount of space available._k[Adaptive](doc://com.apple.documentation/documentation/swiftui/griditem/size-swift.enum/adaptive(minimum:maximum:)) sizing tries to fit as many grid items into the space as possible based on the `minimum` and `maximum` values you set. As a result, using adaptive sizing allows the number of columns in your grid to dynamically adjust based on the space available._Start Walkthrough_£What if you wanted to select a color in your grid by tapping it? And what if the color you selected had some cool effect, like applying a color filter to an image?_°You can even adjust the alignment for individual grid cells using the `.gridCellAnchor(_:)` modifier. Wow, you can literally customize every aspect of this grid!_ûTry each of following `GridItem` [initializers](glossary://initialization) one at a time to see how the grid adjusts when you expand and contract the preview:_~The value assigned to `columnLayout` specifies a three-column grid. `LazyGrid` uses this value to determine the column layout._oYou now have three columns: two of which are fixed to a specific size, and one that adjusts between two values._4Create a `LazyVGrid` filled with colored rectangles._`Now, try adding your own `Image` view with a custom photo and apply a filter to that. Good luck!_∑After finishing this sample, you can continue learning how to make grid-based apps in [Editing Grids](x-com-apple-playgrounds://projects?contentId=com.apple.playgrounds.editinggrids)._ßGrids are useful for creating a [user interface](glossary://user%20interface) that shows content in multiple rows and columns, like TV shows on Apple TV+, for example.oz B e   s u r e   t o   r e m o v e   t h e   ` R o u n d e d R e c t a n g l e `   v i e w   o u t s i d e   o f   y o u r   ` B u t t o n `   o r   y o u  l l   h a v e   e x t r a ,   n o n b u t t o n   v i e w s   i n   y o u r   g r i d ._3Text("No color here")
    .gridCellAnchor(.center)
_GridItem(.flexible())
_Select a color from the grid_6GridItem(.fixed(75), spacing: 20, alignment: .center)
_ãNow for the fun part. Add an image, and have that image respond to changes in `selectedColor` by applying different filters over the photo._ˇThe following code shows a the structure for a basic `Grid` view. A `Grid` is a [View](glossary://view), so it can contain any number of other views inside of it. To fill the grid with views, add a `GridRow` that contains several `Color` views to display._9To do this, add the following code as your button action:_!selectedColor = allColors[index]
_sUse a [state property](glossary://state%20property) and a button to track which color a person chooses in the grid._±Each `GridItem` contains [parameters](glossary://parameter) for `size`, `spacing`, and `alignment`. Try replacing the existing `GridItem()` in `columnLayout` with the one below:_‹Notice anything interesting? The `GridRow` with the most views determines the number of columns in the grid. Even though your second row only has two views, the grid still has three columns, leaving one grid space empty._…To change the selected color, turn each of the `Rectangle` views into a `Button`. A button has both a [label](glossary://label) (its appearance), and an action (something that happens when you tap it)._°The `Button` [label](glossary://label) defines how it appears. Add a `RoundedRectangle` view to display your button as the same rounded rectangle you had before._)Create a simple grid layout using `Grid`.o• I n   ` C o n t e n t V i e w ` ,   y o u  l l   u s e   a   [ L a z y V G r i d ] ( d o c : / / c o m . a p p l e . d o c u m e n t a t i o n / d o c u m e n t a t i o n / s w i f t u i / l a z y v g r i d )   t o   c r e a t e   a   g r i d   o f   r o u n d e d   r e c t a n g l e s   o f   d i f f e r e n t   c o l o r s ._RoundedRectangle(cornerRadius: 4.0)
    .aspectRatio(1.0, contentMode: ContentMode.fit)
    .foregroundColor(allColors[index])
_/GridItem(.flexible(minimum: 20, maximum: 100))
_ıIn `columnLayout`, you use the exact same `GridItem`, repeated a certain number of times. How boring! If you want more control over how the columns layout, you can create a custom layout for your columns by individually creating each `GridItem`._A `ForEach` loop produces [views](glossary://view) as it [iterates](glossary://iteration) over some data. Here, you iterate over the [indices](glossary://index) of the `allColors` [array](glossary://array) to create `RoundedRectangle` views for each item in the array.o§ Y o u   c a n   a l s o   a d j u s t   t h e   a l i g n m e n t   f o r   i n d i v i d u a l   r o w s   u s i n g   t h e   ` a l i g n m e n t `   p a r a m e t e r   f o r   ` G r i d R o w ` .   T h e   s e t t i n g   f o r   t h e   r o w   o v e r r i d e s   t h e   g r i d  s   a l i g n m e n t   s e t t i n g ._ZAdd another `GridRow` on your own, and fill it with as many of your own views as you like._YGridRow {
    Color.blue
    Color.teal
    //#-learning-code-snippet(gridCellColumns)
}
_†Try using `adaptiveColumns` as the argument for `columns` in your `LazyVGrid`. Experiment with how this layout behaves when you expand and contract the preview._ZImage("cactuswren")
    .resizable()
    .scaledToFit()
    .colorMultiply(selectedColor)
^![](intro.png)oc C r e a t i n g   c o n t e n t   w i t h   a   ` G r i d `   g i v e s   y o u   f i n e - g r a i n   c o n t r o l   o v e r   y o u r   g r i d  s   r o w   a n d   c o l u m n   l a y o u t .o? W e l l ,   i f   t h o s e   t h i n g s   s o u n d   i n t e r e s t i n g   t o   y o u ,   y o u  r e   i n   l u c k !_-What do you notice about the `GridItems` now?_÷Try changing the different `GridItem` parameter values. What happens to your grid now? Add a couple more `GridItem` [instances](glossary://instance) to `customColumns`. Can you can predict how the grid will change?_“Each [RoundedRectangle](doc://com.apple.documentation/documentation/swiftui/roundedrectangle/) view sets its foreground color to a value from the `allColors` array using the current index of the `ForEach` loop.oZ G r i d R o w ( a l i g n m e n t :   . b o t t o m )   {   
         T e x t ( " I  m   o n   t h e   b o t t o m   o f   t h e   v i e w ! " ) 
         C o l o r . r e d 
 } 
_¨Try changing the `count` value to `2`, `4`, or some other number and notice how it affects the grid arrangement. What happens to the number of rows when the columns change?oû S o m e t i m e s   t h i s   m i g h t   b e   o k a y ,   b u t   w h a t   i f   y o u   w a n t e d   t o   c h a n g e   i t ?  ÿ>›   H e r e  s   a n   i d e a :   y o u   c o u l d   h a v e   o n e   o f   t h e   v i e w s   i n   t h i s   r o w   o c c u p y   m o r e   t h a n   o n e   c o l u m n ._Adjust the lazy vertical gridoá T o   s e l e c t   a   c o l o r ,   y o u  l l   f i r s t   n e e d   a   p l a c e   t o   s t o r e   a   ` C o l o r `   v a l u e ,   s u c h   a s   a   [ p r o p e r t y ] ( g l o s s a r y : / / p r o p e r t y )   o f   y o u r   ` C o n t e n t V i e w ` ._⁄A grid is one of the most common ways to lay out content in your apps. These experiments will help you become a verifiable Grid Tamer, expressing your own powerful interfaces with fully customizable grid types. Yeehaw!_∂Try using `Text`, `Image`, and `Color` views in the grid row. What do you notice about the space they occupy? Your `GridRow` automatically resizes to fit the tallest view in the row._pThis sample shows how to arrange content using two different types of grid views. Ready to jump into the matrix?_ÖBy using the `.colorMultiply(_:)` modifier, and passing in `selectedColor`, the image changes colors whenever you select a new color:_ùYou may have noticed that, in addition to `.fixed(_:)` and `.flexible()`, there is a third size option for a `GridItem` called `.adaptive(minimum:maximum:)`.oA B u t   S w i f t U I   h a s   a n o t h e r   t y p e   o f   g r i d ,   a   [ L a z y V G r i d ] ( d o c : / / c o m . a p p l e . d o c u m e n t a t i o n / d o c u m e n t a t i o n / s w i f t u i / l a z y v g r i d ) ,   t h a t  s   m o r e   s u i t e d   t o   d i s p l a y i n g   a   [ c o l l e c t i o n ] ( g l o s s a r y : / / c o l l e c t i o n )   o f   d a t a .   T h i s   i s   b e c a u s e   i t   c a n   a u t o m a t i c a l l y   c a l c u l a t e   h o w   m a n y   r o w s   y o u  l l   n e e d   w i t h o u t   r e q u i r i n g   y o u   t o   s p e c i f y   t h a t   a h e a d   o f   t i m e ._STry selecting different colors from the grid. Does your image change color with it?_;GridRow {
    Color.mint
    Color.orange
    Color.pink
}
_∂Add the `.gridCellColumns(_:)` modifier to one of the views in the second row to have it occupy two spaces. Then, change the number of spaces occupied to see how it impacts the grid._-Add this `Button` view inside your `ForEach`:_)Add a custom layout below `columnLayout`:_?A `LazyVGrid` differs from from a `Grid` in two important ways:_/@State private var selectedColor = Color.white
_'Create a grid from a collection of dataoÛ T o   f i l l   t h e   g r i d   w i t h   d i f f e r e n t   c o l o r s ,   y o u  l l   u s e   t h e   ` a l l C o l o r s `   [ v a r i a b l e ] ( g l o s s a r y : / / v a r i a b l e ) .   T h e   g r i d   [ i t e r a t e s ] ( g l o s s a r y : / / i t e r a t i o n )   o v e r   t h i s   [ a r r a y ] ( g l o s s a r y : / / a r r a y )   o f   c o l o r   v a l u e s ,   a n d   c r e a t e s   a   r e c t a n g u l a r   b u t t o n   f o r   e a c h   c o l o r ._Organizing with Grids_BGrid(alignment: .top, horizontalSpacing: 20, verticalSpacing: 40)
_Hlet adaptiveColumns = [GridItem(.adaptive(minimum: 100, maximum: 250))]
_.gridCellColumns(2)
_"LazyVGrid(columns: customColumns)
or W h e n   s o m e o n e   t a p s   a   r e c t a n g l e ,   y o u   w a n t   t o   c h a n g e   ` s e l e c t e d C o l o r `   t h e   c o l o r   o f   t h a t   r e c t a n g l e      t h a t  s   t h e   a c t i o n !  ˇX≠fª	X¶{Œ'x—$}≥^¨V•˙	A	ê	‰
6
â
‚;¶˚O®˜EòÌFìË:ç‡5É÷.uÕ"u nªhΩ^¨ U≠U™˛R•˛S•˘Nß U®˝P§ÔBêÂ7Ü’)fµ 
 Y ≤!!T!¢!ı"J"ù"Ò#F#ï#Ë$A$è$„%8%%‘%Á&:&ì&‚'5'Ñ'º((j*‡+P,µ-	-Â-Ê./R/≥1t1≤1ˇ2∞2»3>55Ü6l6ë7?99à:{;Í;˛<§=H=È>j>‹??v@0@⁄A—BB B?BxCDDDDhDﬁEíFqG=G·HIZI‹JKLMaMæNNΩOO)OÚPsP£Q|RQSS∑TˆUV'WWΩX0X∏YX[ﬁ\4\r]+][]á]…]˚^%``&`k`∂`Õ`Ú             ÷              aŸ