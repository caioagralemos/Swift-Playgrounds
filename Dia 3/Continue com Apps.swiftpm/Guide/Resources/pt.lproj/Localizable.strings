/* Title of Guidebook */
"GuideBook..title" = "Continue com Apps";

/* The title of the intro for this section of the guide */
"GuideBook..IntroKeep Going with Apps..title" = "Continue com Apps";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..IntroKeep Going with Apps..Paragraph0" = "Em Comece com Apps, você aprendeu a usar as [visualizações](glossary://view) da SwiftUI para criar uma interface de usuário simples. Em SwiftUI, as [visualizações](glossary://view) são os blocos de construção de [IU](glossary://user%20interface) que você coloca dentro de outros para montar [visualizações compostas](glossary://composed%view) mais complexas.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..IntroKeep Going with Apps..Paragraph1" = "Aqui, você aprenderá sobre o [estado](glossary://state) e [fluxo de dados](glossary://data%20flow) em SwiftUI. Fluxo de dados é o movimento de valores por todo o app e como a SwiftUI atualiza a IU para refletir qualquer alteração nesses valores. Não menos importante, você aprenderá como [separar os dados do app](glossary://data%20separation) das visualizações que os mostram e por que essa separação é benéfica.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..IntroKeep Going with Apps..Paragraph2" = "No final deste tutorial, você criará um app de SwiftUI totalmente funcional onde as pessoas poderão adicionar, apagar e modificar criaturas de emoji. Comece para criar um app em um piscar de olhos.";

/* Title of step named Modifying State */
"GuideBook..Guide0..StepModifying State..title" = "Modificando o Estado";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..LearningCenterContent..Paragraph3" = "![](ModifyingState.png)";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..LearningCenterContent..Paragraph4" = "Em programação, o termo [estado](glossary://state) se refere ao valor atual de uma variável. Uma [alteração de estado](glossary://state%20change) ocorre quando o valor de uma ou mais variáveis no app é alterado.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..LearningCenterContent..Paragraph5" = "Uma das grandes vantagens da SwiftUI é que ela pode atualizar as aparências das suas visualizações automaticamente, sempre que o seu app [mudar de estado](glossary://state%20change).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..LearningCenterContent..Paragraph6" = "Quando você conecta a IU a dados de app, tais como um [booleano](glossary://Boolean) ou vetor de valores de [string](glossary://String), a SwiftUI pode [observar](glossary://observe) esses dados, atualizando as visualizações que usam os dados sempre que eles mudarem. Isso quer dizer que você jamais precisará escrever um código que diga como ou quando a IU deve atualizar.";

/* Title for task */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..title" = "Use uma propriedade de estado para atualizar uma visualização";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page0..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page0..Paragraph7" = "Neste exemplo, a SwiftUI atualiza a aparência de uma visualização quando uma [mudança de estado](glossary://state%20change) ocorre.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page0..Paragraph8" = "Toque no botão na pré-visualização. Isso alterna o valor da [propriedade](glossary://property) `isOn` entre os [estados](glossary://state) `true` e `false`, fazendo com que a visualização `Circle` apareça, desapareça e apareça novamente.";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page1..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page1..Paragraph9" = "Quando você quer modificar a aparência de uma visualização, primeiro você precisa de alguns dados para rastrear seu [estado](glossary://state) dela. Esses dados são armazenados como uma [propriedade](glossary://property) da visualização.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page1..Paragraph10" = "Considere os dados na visualização como sendo a [fonte da verdade](glossary://source%20of%20truth) que determina o visual da [IU](glossary://user%20interface). Em vez de modificar diretamente a visualização, você modifica os dados e a SwiftUI atualiza a visualização para você. Aqui, os dados são um simples valor [Booleano](glossary://Boolean) que determina se a visualização está sendo mostrada (`true`) ou ocultada (`false`).";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page2..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page2..Paragraph11" = "Importante: sempre crie os dados fora do [corpo](glossary://body) da visualização. Pense no `body` como uma zona ❌ sem criação de dados, usada apenas para declarar a aparência das visualizações. Este é um princípio fundamental da criação de apps, conhecido como [separação de dados](glossary://data%20separation).";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page3..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page3..Paragraph12" = "Para permitir que a SwiftUI atualize as visualizações automaticamente, você precisa indicar quais [propriedades](glossary://property) da visualização ela deve gerenciar a rastrear.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page3..Paragraph13" = "Para fazer isso, adicione uma sintaxe especial chamada [empacotador de propriedades](glossary://property%20wrapper) antes da definição da propriedade. A adição do empacotador de propriedade `@State` antes de `isOn` o transforma em uma [propriedade de estado](glossary://state%20property). A SwiftUI gerencia o valor e atualiza as partes afetadas da visualização sempre que o seu [estado](glossary://state) muda.";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page4..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page4..Paragraph14" = "Então, como seria possível alterar o [estado](glossary://state) de `isOn`? Uma maneira comum é através da [interação do usuário](glossary://user%20interaction), como quando uma pessoa toca em um `Button`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page4..Paragraph15" = "Para criar um `Button`, passe uma [etiqueta](glossary://label) de texto, como “Pressione‑me”, e um [encerramento](glossary://closure) de ação, um bloco de código que é executado quando você toca no botão.";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page5..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page5..Paragraph16" = "Quando uma pessoa toca no botão, o [encerramento](glossary://closure) da ação altera o valor de `isOn` com o método `toggle()`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page5..Paragraph17" = "`toggle()` altera o valor para `true` se for `false`, e para `false` se for `true`, como quando você liga ou desliga um interruptor de luz.";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page6..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page6..Paragraph18" = "Essa instrução `if` usa `isOn` como uma condição para mostrar a visualização contida quando `true` e para ocultá‑la quando `false`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page6..Paragraph19" = "É assim que os dados de `isOn` são conectados à visualização. Seu [estado](glossary://state) atual determina como a IU aparece.";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page7..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page7..Paragraph20" = "Quando você toca no botão na pré‑visualização, a visualização do círculo na instrução `if` é exibida ou ocultada.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskconditionalViews..Page7..Paragraph21" = "Tente mudar a cor do círculo e toque novamente no botão. Tente alterar o valor inicial de `isOn` para `true`. Quais alterações você nota em cada caso?";

/* Title for task */
"GuideBook..Guide0..StepModifying State..TaskaddElse..title" = "Adicione uma instrução `else` que mostra um círculo de cor diferente";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskaddElse..Page8..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskaddElse..Page8..Paragraph22" = "Reflita sobre como o toque no botão atualiza a visualização. Quando você toque no `Button`, você altera o [estado](glossary://state) de `isOn`. A SwiftUI [observa](glossary://observe) essa alteração e atualiza a visualização com o novo valor. No [corpo](glossary://body) da visualização, use uma instrução `if` para mostrar a visualização se `isOn` for `true` e ocultá‑la se for `false`.";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskaddElse..Page9..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskaddElse..Page9..Paragraph23" = "Em vez de não mostrar nenhuma visualização quando `isOn` for `false`, você pode mostrar uma visualização personalizada.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskaddElse..Page9..Paragraph24" = "Depois da instrução `if`, adicione uma instrução `else` que mostra um `Circle` de cor diferente.";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskaddElse..Page10..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskaddElse..Page10..Paragraph25" = "Adicione uma instrução `else` usando a sintaxe seguinte e, em seguida, adicione uma visualização `Circle` e especifique sua cor.";

/*  */
"GuideBook..Guide0..StepModifying State..TaskaddElse..Page10..CodeBlock0" = "else { \n\n}\n";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskaddElse..Page11..title" = "";

/*  */
"GuideBook..Guide0..StepModifying State..TaskaddElse..Page11..CodeBlock1" = "else { \n   Circle()\n       .frame(maxHeight: 200)\n       .foregroundColor(.black)\n   //#-learning-code-snippet(addOffText)\n}\n";

/* Title for task */
"GuideBook..Guide0..StepModifying State..TaskcustomizeConditionalViews..title" = "Adicione detalhes às visualizações ligada e desligada";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskcustomizeConditionalViews..Page12..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskcustomizeConditionalViews..Page12..Paragraph26" = "Agora que você tem duas visualizações, personalize‑as para deixar claro qual está “ligada” e qual está “desligada”.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskcustomizeConditionalViews..Page12..Paragraph27" = "Tente usar uma visualização `Text` para etiquetar cada visualização. Etiquete a primeira como “Ativada”.";

/*  */
"GuideBook..Guide0..StepModifying State..TaskcustomizeConditionalViews..Page12..CodeBlock2" = "Text(\"Ativada\")\n";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskcustomizeConditionalViews..Page13..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskcustomizeConditionalViews..Page13..Paragraph28" = "Etiquete a segunda visualização como “Desativada”.";

/*  */
"GuideBook..Guide0..StepModifying State..TaskcustomizeConditionalViews..Page13..CodeBlock3" = "Text(\"Desativada\")\n";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskcustomizeConditionalViews..Page14..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskcustomizeConditionalViews..Page14..Paragraph29" = "E, por fim, faça com que cada visualização tenha uma forma diferente, como `Rectangle` ou `Capsule`.";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskcustomizeConditionalViews..Page15..title" = "";

/*  */
"GuideBook..Guide0..StepModifying State..TaskcustomizeConditionalViews..Page15..CodeBlock4" = "if isOn {\n      Circle()\n          .frame(maxHeight: 200)\n          .foregroundColor(.mint)\n\n      Text(\"Ativado\")\n} else {\n      Rectangle()\n          .frame(maxHeight: 200)\n          .foregroundColor(.gray)\n\n      Text(\"Desativado\")\n}\n";

/* Title for task */
"GuideBook..Guide0..StepModifying State..TaskaddNewConditionalView..title" = "Adicione uma nova visualização condicional";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskaddNewConditionalView..Page16..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskaddNewConditionalView..Page16..Paragraph30" = "Agora, tente adicionar uma visualização condicional totalmente nova por sua conta:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskaddNewConditionalView..Page16..OrderedList0..Paragraph31" = "Adicione uma [propriedade de estado](glossary://state%20value) fora do [corpo](glossary://body) e atribua‑lhe um valor booleano.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskaddNewConditionalView..Page16..OrderedList0..Paragraph32" = "Crie uma [instrução if](glossary://if%20statement) que mostra uma visualização se o valor da propriedade de estado for `true` e outra visualização se for `false`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskaddNewConditionalView..Page16..OrderedList0..Paragraph33" = "Crie um novo `Button` e alterne a propriedade de estado sempre que pressioná‑lo.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskaddNewConditionalView..Page16..Paragraph34" = "Será que a sua visualização condicional funciona conforme o esperado?";

/* title for page */
"GuideBook..Guide0..StepModifying State..TaskaddNewConditionalView..Page17..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..TaskaddNewConditionalView..Page17..Paragraph35" = "Antes de prosseguir, tente usar o [método do patinho de borracha](glossary://rubber%20ducky%20method) para explicar como o código da visualização condicional funciona, com a maior riqueza de detalhes possível. Para que serve uma propriedade de estado? Como a visualização sabe quando precisa se atualizar? Se não se lembrar de alguma coisa, volte e tente descobrir qual parte do conhecimento está faltando. O seu patinho de borracha vai agradecer!";

/* Contents of success message */
"GuideBook..Guide0..StepModifying State..SuccessMessage..message" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..SuccessMessage..Paragraph36" = "Uhuuu!";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..SuccessMessage..Paragraph37" = "Agora você entende como usar uma [propriedade de estado](glossary://state%20value) para atualizar a aparência de uma visualização de SwiftUI. Essa propriedade de estado é armazenada fora do [corpo](glossary://body) da visualização, onde você declara a IU da visualização.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepModifying State..SuccessMessage..Paragraph38" = "Este é um princípio fundamental da programação de apps em SwiftUI: sempre manter os dados do app separados da IU que os mostra. Isso permite que você preserve uma única [fonte da verdade](glossary://source%20of%20truth) e conserva a facilidade para entender e manter o código da IU.";

/* Title of step named Using a Conditional Modifier */
"GuideBook..Guide0..StepUsing a Conditional Modifier..title" = "Usando um Modificador Condicional";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..LearningCenterContent..Paragraph39" = "![](UsingAConditionalModifier.png)";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..LearningCenterContent..Paragraph40" = "No exemplo anterior, você criou uma [propriedade de estado](glossary://state%20property) `isOn` cujo armazenamento é gerenciado pela SwiftUI. Ao mudar o [estado](glossary://state) de `isOn`, você conseguiu mostrar uma das duas visualizações diferentes condicionalmente.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..LearningCenterContent..Paragraph41" = "E se você simplesmente quiser mudar a aparência de uma visualização existente, como a cor ou o tamanho de uma visualização `Circle`? Para fazer isso, você precisará escrever um código condicional que especifique como a visualização aparece quando [alterações de estado](glossary://state%20change) ocorrem.";

/* Title for task */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..title" = "Altere modificadores de visualização condicionalmente";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..Page18..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..Page18..Paragraph42" = "Como na visualização anterior, esta visualização também usa uma [propriedade de estado](glossary://state%20property) e um `Button` para mudar a aparência de um `Circle`. Porém, há algo diferente neste código. Tente descobrir o que mudou e prossiga quando achar que encontrou.";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..Page19..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..Page19..Paragraph43" = "Descobriu como funciona?";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..Page19..Paragraph44" = "Em vez de criar uma visualização diferente quando `isOn` for `true` ou `false`, você pode modificar a aparência de uma única visualização usando [modificadores de visualização](glossary://modifier) que contêm código condicional.";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..Page20..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..Page20..Paragraph45" = "Note que o modificador`.foregroundColor(_:)` contém uma sintaxe especial. Isso se chama [operador condicional ternário](glossary://ternary%20conditional%20operator), uma maneira concisa de criar uma instrução `if-else` em uma única linha de código.";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..Page21..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..Page21..Paragraph46" = "Você pode ler este código como: se `isOn` for `true`, passe o valor `.yellow`; caso contrário, passe `.black`.";

/*  */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..Page21..CodeBlock5" = "isOn ? .yellow : black\n";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..Page21..Paragraph47" = "No geral, isso fica assim:";

/*  */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..Page21..CodeBlock6" = "condition ? trueValue : falseValue\n";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..Page22..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskconditionalCircle..Page22..Paragraph48" = "Tente mudar a cor do círculo para `.purple` quando `isOn` for `true`, e para um matiz de verde-claro, como `.mint`, quando for `false`.";

/* Title for task */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..title" = "Adicione um modificador `shadow(color:radius:)` que mostre uma sombra de cor diferente em cada estado";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..Page23..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..Page23..Paragraph49" = "Assim como no exemplo das `ConditionalViews`, a SwiftUI [observa](glossary://observe) a [propriedade de estado](glossary://state%20property) `isOn`. Quando o valor de `isOn` muda, a SwiftUI atualiza a visualização `Circle` com o novo valor de seu modificador `.foregroundColor(_:)`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..Page23..Paragraph50" = "A seguir, tente adicionar outro modificador, `.shadow(color:radius:)`, que use o valor de `isOn` para mudar a sombra da visualização.";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..Page24..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..Page24..Paragraph51" = "Primeiro, adicione o modificador `.shadow(color:radius:)` a `Circle`.";

/*  */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..Page24..CodeBlock7" = ".shadow(color: <#T##Color#>, radius: 20)\n";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..Page25..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..Page25..Paragraph52" = "Para o parâmetro `color` do modificador, use o [operador condicional ternário](glossary://ternary%20conditional%20operator) para mudar a cor da sombra com base no [estado](glossary://state) de `isOn`.";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..Page26..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..Page26..Paragraph53" = "A sintaxe do operador ternário é assim:";

/*  */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..Page26..CodeBlock8" = "isOn ? .indigo : .orange\n";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..Page26..Paragraph54" = "Esse fragmento de código pode ser interpretado como: se `isOn` for `true`, use o valor `.indigo`; caso contrário, use o valor `.orange`.";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..Page27..title" = "";

/*  */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddShadowModifier..Page27..CodeBlock9" = ".shadow(color: isOn ? .indigo : .orange, radius: 20)\n";

/* Title for task */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddScaleModifier..title" = "Mude a escala do círculo ao tocar no botão";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddScaleModifier..Page28..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddScaleModifier..Page28..Paragraph55" = "Hora de tentar por sua conta. Veja se você consegue descobrir como usar o modificador `.scaleEffect(_:)` com um [operador condicional ternário](glossary://ternary%20conditional%20operator) para mudar a escala do círculo com base no estado de `isOn`.";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddScaleModifier..Page29..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddScaleModifier..Page29..Paragraph56" = "Primeiro, adicione o modificador `.scaleEffect(_:)` ao círculo. Depois, use o operador ternário para especificar uma escala se `isOn` for `true` e outra se for `false`.";

/*  */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddScaleModifier..Page29..CodeBlock10" = ".scaleEffect(<#T##s: CGFloat##CGFloat#>)\n";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddScaleModifier..Page30..title" = "";

/*  */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddScaleModifier..Page30..CodeBlock11" = ".scaleEffect(isOn ? 1 : 0.75)\n";

/* Title for task */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddAnimationModifier..title" = "Anime suas mudanças de estado";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddAnimationModifier..Page31..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddAnimationModifier..Page31..Paragraph57" = "Da mesma forma como a SwiftUI sabe atualizar suas visualizações automaticamente, ela também sabe animar mudanças nas suas visualizações com base nos valores que você muda.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddAnimationModifier..Page31..Paragraph58" = "Par fazer isso, anexe um modificador `.animation(_:value:)` à visualização que você deseja animar e selecione uma `Animation`, bem como um valor a ser monitorado quanto a mudanças.";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddAnimationModifier..Page32..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddAnimationModifier..Page32..Paragraph59" = "Por exemplo, você pode usar uma animação padrão para animar qualquer mudança no valor de `isOn`.";

/*  */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddAnimationModifier..Page32..CodeBlock12" = ".animation(.default, value: isOn)\n";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddAnimationModifier..Page32..Paragraph60" = "Quando `isOn` mudar, as modificações de visualização controladas por esse valor serão animadas. Como você usa `isOn` para determinar a sombra, cor e escala da visualização, todas essas características serão animadas para o novo estado quando o valor mudar.";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddAnimationModifier..Page33..title" = "";

/*  */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddAnimationModifier..Page33..CodeBlock13" = ".animation(.default, value: isOn)\n";

/* title for page */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddAnimationModifier..Page34..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..TaskaddAnimationModifier..Page34..Paragraph61" = "Tente mudar a animação padrão para algo diferente. `.default` lhe dá a animação `.easeInOut`, mas você pode mudá-la para `.spring(response:dampingFraction:blendDuration:)` ou `.linear(duration:)` para ver como a animação se altera.";

/* Contents of success message */
"GuideBook..Guide0..StepUsing a Conditional Modifier..SuccessMessage..message" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..SuccessMessage..Paragraph62" = "Excelente trabalho!";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..SuccessMessage..Paragraph63" = "Agora você sabe usar uma [propriedade de estado](glossary://state%20property) para mudar a aparência de uma visualização e como animar essas mudanças usando o modificador `.animation(_:value:)`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepUsing a Conditional Modifier..SuccessMessage..Paragraph64" = "A seguir, você aprenderá a usar [visualizações integradas](glossary://built-in%20view) da SwiftUI e [vínculos](glossary://binding) para criar tipos diferentes de mudanças de estado na IU.";

/* Title of step named SwiftUI Built-in Views */
"GuideBook..Guide0..StepSwiftUI Built-in Views..title" = "Visualizações Integradas da SwiftUI";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..LearningCenterContent..Paragraph65" = "![](SwiftUIBuilt-inViews.png)";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..LearningCenterContent..Paragraph66" = "A SwiftUI fornece várias [visualizações integradas](glossary://built-in%20view), como controles deslizantes, interruptores e seletores, que permitem a uma pessoa mudar o estado dos dados do app ao [interagir](glossary://user%20interaction) com eles.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..LearningCenterContent..Paragraph67" = "Essas visualizações integradas têm uma maneira especial de compartilhar dados com outra visualização, chamada [vínculo](glossary://binding).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..LearningCenterContent..Paragraph68" = "Você pode usar essas visualizações integradas com valores vinculados para alterar os dados do app e, por sua vez, a IU do app.";

/* Title for task */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..title" = "Use um vínculo";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page35..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page35..Paragraph69" = "Até agora, você usou uma propriedade de estado para mudar a IU [localmente](glossary://local%20scope) ou dentro da mesma visualização. Um exemplo disso é definir uma [propriedade de estado](glossary://state%20property) em `ConditionalCircle` e usá-la para mudar a aparência de uma visualização no [corpo](glossary://body) de `ConditionalCircle`.";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page36..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page36..Paragraph70" = "Mas, e se você quiser permitir que uma [subvisualização](glossary://subview) mude os dados? Por exemplo, se a sua visualização [local](glossary://local%20scope) armazena suas informações de contato, a subvisualização pode fornecer uma [interação](glossary://user%20interaction) personalizada para mudar o número de telefone do contato. Mas como você poderia permitir que a subvisualização mude os dados sem criar mais de uma [fonte da verdade](glossary://source%20of%20truth)?";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page37..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page37..Paragraph71" = "A chave para comunicar mudanças de dados entre duas visualizações se chama [vínculo](glossary://binding). Um vínculo permite que você mantenha uma única fonte da verdade, mas permite que uma [subvisualização](glossary://subview) modifique esse valor remotamente. Isso é chamado de vínculo porque a fonte da verdade, como uma [propriedade de estado](glossary://state%20property), vincula (ou conecta) uma segunda visualização e, sempre que a segunda visualização altera os dados, a fonte da verdade é atualizada.";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page38..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page38..Paragraph72" = "Tente tocar em `Toggle` na pré-visualização.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page38..Paragraph73" = "Note que as visualizações `Image` e `Toggle` mudam de aparência quando você toca no alternador. `Toggle` pode mudar a [fonte da verdade](glossary://source%20of%20truth) remotamente, permitindo a si e à visualização `Image` compartilhar o mesmo valor, embora sejam duas visualizações separadas.";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page39..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page39..Paragraph74" = "Esta é a sua fonte da verdade, uma [propriedade de estado](glossary://state%20property) que você armazena [localmente](glossary://local%20scope) na visualização `Bindings`. A fonte da verdade de um vínculo precisa ter seus valores gerenciados pela SwiftUI, como ao adicionar um [empacotador de propriedades](glossary://property%20wrapper) `@State` a ela.";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page40..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page40..Paragraph75" = "Esta é a visualização integrada `Toggle`. Uma visualização `Toggle` aceita um valor Booleano de [vínculo](glossary://binding) em seu parâmetro `isOn`. Isso significa que a visualização do interruptor sabe como alterar o valor `Boolean` com base em alguma [interação do usuário](glossary://user%20interaction), como quando uma pessoa toca para ativar ou desativar o interruptor, e comunica qualquer alteração de estado de volta à [fonte da verdade](glossary://source%20of%20truth) local `isOn`.";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page41..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TasktoggleExperiment..Page41..Paragraph76" = "Para passar um vínculo, use a [propriedade de estado](glossary://state%20property) gerenciada pela SwiftUI com um `$` na frente. Passe `$isOn` para indicar que sempre que `Toggle` muda de valor remotamente, o [vínculo](glossary://binding) modifica a fonte da verdade, `isOn`.";

/* Title for task */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAStateVar..title" = "Adicione uma nova propriedade de estado do tipo `Color`";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAStateVar..Page42..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAStateVar..Page42..Paragraph77" = "Em seguida, tente usar uma visualização `ColorPicker` integrada junto com um [vínculo](glossary://binding) para alterar a cor da visualização `Image` da bateria.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAStateVar..Page42..Paragraph78" = "Para fazer isso, primeiro crie uma [propriedade de estado](glossary://state%20property) para funcionar como fonte da verdade para um valor `Color`. Dê a ela um valor inicial de `Color.primary`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAStateVar..Page42..Paragraph79" = "Tente fazer isso por conta própria e use as dicas seguintes caso não consiga sair do lugar.";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAStateVar..Page43..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAStateVar..Page43..Paragraph80" = "Defina uma [propriedade](glossary://property) com o [empacotador de propriedade](glossary://property%20wrapper) `@State` e [atribua-lhe](glossary://assignment) um valor inicial de `Color.primary`.";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAStateVar..Page44..title" = "";

/*  */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAStateVar..Page44..CodeBlock14" = "@State var color = Color.primary\n";

/* Title for task */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorPicker..title" = "Crie um `ColorPicker` e passe o valor de vínculo";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorPicker..Page45..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorPicker..Page45..Paragraph81" = "Abaixo da visualização `Toggle`, crie um `ColorPicker` com o inicializador a seguir. Adicione os argumentos por sua conta, usando `Toggle` como exemplo.";

/*  */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorPicker..Page45..CodeBlock15" = "ColorPicker(<#T##title: StringProtocol##StringProtocol#>, selection: <#T##Binding<CGColor>#>)\n";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorPicker..Page46..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorPicker..Page46..OrderedList1..Paragraph82" = "Passe uma `String` como título, como por exemplo, “Selecionar uma Cor”.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorPicker..Page46..OrderedList1..Paragraph83" = "Passe o valor de vínculo para `selection`, adicionando um `$` antes da [propriedade de estado](glossary://state%20property) de cor.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorPicker..Page46..Paragraph84" = "Se quiser testar a visualização `Bindings` no seu app, adicione-a temporariamente a `ContentView`.";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorPicker..Page47..title" = "";

/*  */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorPicker..Page47..CodeBlock16" = "ColorPicker(\"Select a Color\", selection: $color) \n";

/* Title for task */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorModifier..title" = "Defina a cor de `Image` com a propriedade de estado de cor";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorModifier..Page48..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorModifier..Page48..OrderedList2..Paragraph85" = "Tente selecionar uma cor no `ColorPicker` na pré-visualização. Note que a cor do seletor muda, mas nada mais muda na sua IU. Isso ocorre porque a sua propriedade de estado não está conectada a nenhuma outra visualização [local](glossary://local%20scope).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorModifier..Page48..OrderedList2..Paragraph86" = "Agora altere a cor da visualização de imagem para atualizá-la conforme a cor do seletor.";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorModifier..Page49..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorModifier..Page49..Paragraph87" = "Para alterar a cor da visualização `Image`, adicione um modificador `.foregroundColor(_:)` e passe a sua propriedade de estado de cor como um argumento.";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorModifier..Page50..title" = "";

/*  */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorModifier..Page50..CodeBlock17" = ".foregroundColor(color)\n";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorModifier..Page51..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddAColorModifier..Page51..Paragraph88" = "Agora selecione uma cor do seletor de cor. Será que a sua `Image` também muda de cor?";

/* Title for task */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddATextView..title" = "Crie uma visualização `Text` que mude de cor quando você seleciona uma nova cor";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddATextView..Page52..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddATextView..Page52..Paragraph89" = "Adicione uma visualização `Text` que muda de cor quando você seleciona uma nova cor no seletor de cores. Você pode usar o modificador `.foregroundColor(_:)` para fazer isso, da mesma maneira como na imagem.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddATextView..Page52..Paragraph90" = "Escolha uma fonte maior para a visualização `Text` usando o modificador [.font](doc://com.apple.documentation/documentation/swiftui/font) e passando `.largeTitle`.";

/* title for page */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddATextView..Page53..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddATextView..Page53..Paragraph91" = "Adicione `.padding()` às visualizações para criar um espaço fixo entre uma visualização e todas as visualizações ao redor dela. Você também pode adicionar um `Spacer()`, uma visualização invisível que encolhe e expande variavelmente para ocupar o espaço disponível entre visualizações.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..TaskaddATextView..Page53..Paragraph92" = "[Preenchimento](doc://com.apple.documentation/documentation/swiftui/view/padding(_:_:)) e [espaçadores](doc://com.apple.documentation/documentation/swiftui/spacer) permitem criar layout de visualização adaptáveis que fazem sua visualização aparecer corretamente em diversos tamanhos de tela. Confira [Laying Out a Simple View](doc://com.apple.documentation/documentation/swiftui/laying-out-a-simple-view) para saber mais.";

/* Contents of success message */
"GuideBook..Guide0..StepSwiftUI Built-in Views..SuccessMessage..message" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..SuccessMessage..Paragraph93" = "Bravo!";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..SuccessMessage..Paragraph94" = "Agora você sabe usar uma visualização integrada da SwiftUI, como um `ColorPicker` (seletor de cores) junto com um [vínculo](glossary://binding) para criar [interações](glossary://user%20interaction) personalizadas para mudar o estado do seu app.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSwiftUI Built-in Views..SuccessMessage..Paragraph95" = "Junto com o seu conhecimento de [propriedades de estado](glossary://state%20property), isso permite que você crie interações de usuário mais interessantes que alteram a aparência da IU do app.";

/* Title of step named Practice with SwiftUI Built-in Views */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..title" = "Pratique com Visualizações Integradas da SwiftUI";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..LearningCenterContent..Paragraph96" = "![](PracticeWithSwiftUIBuilt-inViews.png)";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..LearningCenterContent..Paragraph97" = "Agora que você sabe o básico sobre propriedades de estado, vínculos e visualizações integradas de SwiftUI, é hora de criar alguns exemplos por sua conta.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..LearningCenterContent..Paragraph98" = "Primeiro, você vai usar uma visualização integrada `Slider` para mudar uma [propriedade de estado](glossary://state%20property) que controla a largura de um `Rectangle`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..LearningCenterContent..Paragraph99" = "Depois, você tentará criar um editor de história com as visualizações integradas `TextField` para mudar o valor de alguma propriedade de estado de `String`, o que resultará em uma narrativa interessante.";

/* Title for task */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskbuildASlider..title" = "Crie um controle deslizante";

/* title for page */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskbuildASlider..Page54..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskbuildASlider..Page54..Paragraph100" = "Crie uma visualização que use um `Slider` integrado para mudar a largura de uma visualização `Rectangle`. Para conseguir isso, você precisa definir uma nova [propriedade de estado](glossary://state%20property) e passá‑la para o `Slider` como um [vínculo](glossary://binding).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskbuildASlider..Page54..Paragraph101" = "É possível mudar a largura de uma visualização com o modificador `.frame(width:)`. Note que esse modificador aceita um valor [Double](doc://com.apple.documentation/documentation/swift/double) (um [tipo](glossary://type) especial de valor numérico), portanto, defina a propriedade de estado como `Double`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskbuildASlider..Page54..Paragraph102" = "Tire um tempo para experimentar isso por conta própria e use as dicas a seguir caso não consiga sair do lugar.";

/* title for page */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskbuildASlider..Page55..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskbuildASlider..Page55..Paragraph103" = "Defina uma propriedade de estado do tipo `Double` acima do `body` (corpo) da visualização. Esta é a sua [fonte da verdade](glossary://source%20of%20truth) local.";

/*  */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskbuildASlider..Page55..CodeBlock18" = "@State var width : Double = 0\n";

/* title for page */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskbuildASlider..Page56..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskbuildASlider..Page56..Paragraph104" = "Crie o seu `Slider` usando o inicializador `Slider(value:)`. Passe um [vínculo](glossary://binding) para a sua [propriedade de estado](glossary://state%20property).";

/*  */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskbuildASlider..Page56..CodeBlock19" = "Slider(value: $width)\n";

/* title for page */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskbuildASlider..Page57..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskbuildASlider..Page57..Paragraph105" = "Crie um `Rectangle` e adicione o modificador `.frame(width:)` a ele. Já que o valor de um controle deslizante padrão varia de `0` a `1`, multiplique a largura por um número maior para que você possa notar mudanças no valor.";

/*  */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskbuildASlider..Page57..CodeBlock20" = "Rectangle()\n    .frame(width: width * 300)\n";

/* Title for task */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskstoryEditor..title" = "Crie uma história";

/* title for page */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskstoryEditor..Page58..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskstoryEditor..Page58..Paragraph106" = "Aqui está mais um experimento para você fazer:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskstoryEditor..Page58..Paragraph107" = "Você pode usar o [TextField](doc://com.apple.documentation/documentation/swiftui/textfield) da SwiftUI para mudar os valores de `String` com base nos caracteres que uma pessoa digita no campo.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskstoryEditor..Page58..OrderedList3..Paragraph108" = "Crie uma história personalizável. Para fazer isso, defina várias [propriedades de estado](glossary://state%20property) junto com as visualizações `TextField` correspondentes para permitir que uma pessoa digite dados como nome, um hobby e uma comida preferida.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskstoryEditor..Page58..OrderedList3..Paragraph109" = "Abaixo dos campos de texto, crie uma visualização `Text` que combine todos os valores usando [interpolação de string](glossary://string%20interpolation) para criar uma história. Mais ou menos assim:";

/*  */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskstoryEditor..Page58..CodeBlock21" = "Text(\"Olá, me chamo \\(name), meu hobby favorito é \\(hobby) e adoro comer \\(favoriteFood)!\")\n";

/* title for page */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskstoryEditor..Page59..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..TaskstoryEditor..Page59..Paragraph110" = "Bônus: adicione uma visualização `Button` ou `Toggle` que mostre a história quando você tocar nela.";

/* Contents of success message */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..SuccessMessage..message" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..SuccessMessage..Paragraph111" = "Você está entendendo bem!";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..SuccessMessage..Paragraph112" = "Agora você pode controlar mudanças de estado localmente usando propriedades de estado, e entre duas visualizações usando vínculos.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepPractice with SwiftUI Built-in Views..SuccessMessage..Paragraph113" = "A seguir, você descobrirá como criar dados que podem ser usados em todas as visualizações do app.";

/* Title of step named Navigating in SwiftUI */
"GuideBook..Guide0..StepNavigating in SwiftUI..title" = "Navegando na SwiftUI";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..LearningCenterContent..Paragraph114" = "![](NavigatingInSwiftUI.png)";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..LearningCenterContent..Paragraph115" = "Agora que você está pegando o jeito de como gerenciar o estado dentro de uma única visualização de SwiftUI, é hora de começar a pensar mais longe.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..LearningCenterContent..Paragraph116" = "Em alguns casos, quando você criar um app, você terá dados que deseja compartilhar entre duas ou mais visualizações, de modo que nem mesmo um [vínculo](glossary://binding) poderá cuidar disso. Você não deve tentar replicar os dados em cada nova visualização, pois isso seria muito difícil de rastrear e poderia causar bugs no app. Em vez disso, você aprenderá a criar e manter um único [modelo de dados](glossary://data%20model) que pode ser usado por diversas visualizações do app.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..LearningCenterContent..Paragraph117" = "Mas, antes de aprender a fazer isso, você precisa saber como criar um app com várias visualizações. Para isso, você adicionará uma navegação com uma `NavigationSplitView` ou um `NavigationStack`.";

/* Title for task */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationExperiment..title" = "Crie um `NavigationStack`";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationExperiment..Page60..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationExperiment..Page60..Paragraph118" = "Para navegar para as outras visualizações, você precisará de dois tipos diferentes de visualizações de navegação:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationExperiment..Page60..OrderedList4..Paragraph119" = "Um [NavigationStack](doc://com.apple.documentation/documentation/swiftui/navigationstack) organiza as visualizações umas sobre as outras, como em um baralho de cartas.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationExperiment..Page60..OrderedList4..Paragraph120" = "Uma [NavigationSplitView](doc://com.apple.documentation/documentation/swiftui/navigationsplitview) organiza as visualizações em duas ou três colunas, permitindo que você selecione itens da coluna condutora para apresentar uma visualização na coluna de trilha.";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationExperiment..Page61..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationExperiment..Page61..Paragraph121" = "Cada uma dessas visualizações de navegação funciona como um [contêiner](glossary://container) para apresentar visualizações diferentes de acordo como uma pessoa navega no app, elas apenas apresentam as visualizações de maneiras levemente diferentes.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationExperiment..Page61..Paragraph122" = "Primeiro, você criará um `NavigationStack` para ver como ele funciona.";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationExperiment..Page62..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationExperiment..Page62..Paragraph123" = "Primeiro, adicione um `NavigationStack` com uma visualização `List` dentro. Uma [List](doc://com.apple.documentation/documentation/swiftui/list) mostra qualquer quantidade de visualizações em uma coluna vertical rolável.";

/*  */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationExperiment..Page62..CodeBlock22" = "NavigationStack { \n   List { \n       Text(\"Conteúdo do NavigationStack\")\n       //#-learning-code-snippet(addNavLink)\n       //#-learning-code-snippet(addSecondNavLink)\n\n   }\n}\n";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationExperiment..Page63..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationExperiment..Page63..Paragraph124" = "Observe a pré‑visualização. Você verá uma única visualização `Text` em `List` e nada mais. Para navegar para outra visualização, você adicionará um [Link de Navegação](glossary://navigation%20link) dentro do `NavigationStack`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationExperiment..Page63..Paragraph125" = "Mas por que você se importou em criar um `NavigationStack` se um `NavigationLink` é o que leva você para outra visualização? Bem, é como uma bicicleta; você não pode pedalar sem as rodas. Você não pode navegar para outra visualização sem que os links estejam dentro de um `NavigationStack` ou de uma `NavigationSplitView`.";

/* Title for task */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..title" = "Crie um link de navegação";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page64..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page64..Paragraph126" = "O `NavigationStack` e a `NavigationSplitView` podem mostrar um conteúdo diferente dependendo de como uma pessoa interage com o app. Para que a visualização de navegação mostre uma visualização diferente, crie um [Link de Navegação](glossary://navigation%20link), um botão que uma pessoa pode tocar para navegar para uma visualização separada.";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page65..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page65..Paragraph127" = "Um `NavigationLink` precisa conter duas coisas:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page65..OrderedList5..Paragraph128" = "Um link para a [visualização de destino](glossary://destination%20view).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page65..OrderedList5..Paragraph129" = "Uma [etiqueta](glossary://label) (como o botão deve aparecer).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page65..Paragraph130" = "O destino pode ser qualquer visualização que você quiser, desde algo simples como uma visualização `Text` ou `Image` até uma [visualização composta](glossary://composed%20view) criada por você.";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page66..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page66..Paragraph131" = "O código abaixo cria um `NavigationLink` com uma visualização `Text` como [etiqueta](glossary://label) e uma visualização `Text` como o [destino](glossary://destination%20view).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page66..Paragraph132" = "Tente adicionar o `NavigationLink` abaixo e toque no link da pré‑visualização.";

/*  */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page66..CodeBlock23" = "NavigationLink(\"Push Me!\") { \n   Text(\"Sou a Visualização de destino\")\n       .navigationTitle(\"Destination\")\n}\n";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page67..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page67..Paragraph133" = "Adicione mais um link de navegação e tente navegar para as outras visualizações no `NavigationStack`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page67..Paragraph134" = "Como um `NavigationStack` se comporta como um baralho de cartas, ele só exibe a visualização que está por cima. Ao navegar para uma nova visualização, ela é empurrada para o topo da pilha para que possa ser vista.";

/*  */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLink..Page67..CodeBlock24" = "NavigationLink(\"Push Me!\") { \n   Text(\"Sou outra visualização de destino\")\n       .navigationTitle(\"Destination\")\n}\n";

/* Title for task */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..title" = "Faça experiências com uma `NavigationSplitView`";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..Page68..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..Page68..Paragraph135" = "A seguir, você criará uma `NavigationSplitView` para mostrar o conteúdo como colunas.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..Page68..Paragraph136" = "Você usará links de navegação como coluna condutora que, quando tocados, mostrarão um texto na coluna de trilha.";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..Page69..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..Page69..Paragraph137" = "Primeiro, adicione uma `NavigationSplitView`. Você notará duas seções: a primeira é a coluna condutora da visualização dividida e a segunda é uma [visualização marcadora de posição](glossary://placeholder%20view) que mostra um conteúdo temporário até que você selecione um dos links.";

/*  */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..Page69..CodeBlock25" = "NavigationSplitView { \n    //#-learning-code-snippet(listOfLinks)\n\n} detail: { \n    //#-learning-code-snippet(detailView)\n    \n}\n";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..Page70..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..Page70..Paragraph138" = "A seguir, adicione alguns links à `NavigationSplitView`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..Page70..Paragraph139" = "Você pode notar que a visualização ainda tem a mesma aparência do `NavigationStack` se o tamanho da pré‑visualização for pequeno. Tente expandir a pré‑visualização para ver várias colunas.";

/*  */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..Page70..CodeBlock26" = "List {\n    NavigationLink(\"First link\") {\n        Text(\"😵‍💫\")\n    }\n    NavigationLink(\"Second link\") {\n        Text(\"😵‍\")\n    }\n    //#-learning-code-snippet(addMoreNavLinks)\n}\n";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..Page71..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..Page71..Paragraph140" = "Finalmente, adicione uma [visualização marcadora de posição](glossary://placeholder%20view) para fornecer um conteúdo inicial à segunda coluna.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..Page71..Paragraph141" = "Para ver esse conteúdo marcador de posição, expanda a pré‑visualização e reinicie‑a antes de selecionar um link.";

/*  */
"GuideBook..Guide0..StepNavigating in SwiftUI..TasknavigationSplitViewExperiment..Page71..CodeBlock27" = "Text(\"Selecione um link\")\n";

/* Title for task */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddMoreNavLinks..title" = "Experimente Usar NavigationLinks";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddMoreNavLinks..Page72..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddMoreNavLinks..Page72..Paragraph142" = "Se quiser personalizar a aparência do `NavigationLink`, você pode usar um [inicializador](glossary://initializer) diferente que aceite uma [etiqueta](glossary://label) personalizada.";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddMoreNavLinks..Page73..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddMoreNavLinks..Page73..Paragraph143" = "O código abaixo cria um `NavigationLink` com uma [etiqueta](glossary://label) personalizada, composta de um `HStack` com uma visualização `Text` e `Image`. Assim como o conteúdo de destino, a etiqueta pode ser qualquer visualização que você queira!";

/*  */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddMoreNavLinks..Page73..CodeBlock28" = "```NavigationLink { \n    SlidingRectangle()\n       .navigationTitle(\"Sliding Rectangle\")\n} label: { \n    HStack { \n        Text(\"Toque para Navegar\")\n        Spacer()\n        Image(systemName: \"arrow.forward.circle\")\n            .font(.largeTitle)\n    }\n}\n```";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddMoreNavLinks..Page74..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddMoreNavLinks..Page74..Paragraph144" = "Experimente adicionar um novo `NavigationLink`, atribuindo‑lhe um destino, etiqueta e título de navegação. Tente navegar para uma das outras visualizações do app, como a visualização `ConditionalCircle`, por exemplo.";

/* Title for task */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskmyApp..title" = "Entenda como o app mostra as visualizações";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskmyApp..Page75..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskmyApp..Page75..Paragraph145" = "Agora que você experimentou com a adição de [links de navegação](glossary://navigation%20link) dentro de um `NavigationStack` e `NavigationSplitView`, o objetivo é fazer com que a primeira visualização do app mostre um `NavigationStack`. Depois de adicionar links de navegação, isso permitirá que as pessoas naveguem para visualizações diferentes quando usarem o seu app.";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskmyApp..Page76..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskmyApp..Page76..Paragraph146" = "Você diz ao app quais visualizações ele deve mostrar primeiro na definição do seu app. Aqui, você pode ver que o app se chama `MyApp` por padrão, e ele segue as orientações do [protocolo](glossary://protocol) `App`, o que permite que ele seja executado no seu dispositivo como qualquer outro app.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskmyApp..Page76..Paragraph147" = "Experimente executar o projeto atual como um app. Para fazer isso, pressione o botão executar (▶︎). Por enquanto, não há muito a ser visto. 🙈";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskmyApp..Page77..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskmyApp..Page77..Paragraph148" = "A propriedade `body` do app define o seu conteúdo. Por enquanto, tudo o que você precisa saber é que é necessário ter ao menos uma visualização dentro de um `WindowGroup`, que funciona como um contêiner para a [hierarquia de visualização](glossary://view%20hierarchy) do app, uma coleção de visualizações que o app apresenta ao ser aberto.";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskmyApp..Page78..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskmyApp..Page78..Paragraph149" = "`ContentView` é a sua [visualização de nível superior](glossary://top-level%20view), a primeira visualização que o app mostra ao ser aberto. Ela fica no topo da [hierarquia de visualização](glossary://view%20hierarchy), que é uma coleção estruturada de [subvisualizações](glossary://subview) derivadas da visualização de nível superior.";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskmyApp..Page79..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskmyApp..Page79..Paragraph150" = "Tente mudar temporariamente a `ContentView` para alguma outra visualização, como `Text` ou `Image`, e execute o app. Note que a visualização de nível superior do app mudou. É assim que se altera o conteúdo que o app mostra.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskmyApp..Page79..Paragraph151" = "Quando estiver pronto, mude a visualização de nível superior novamente para `ContentView`.";

/* Title for task */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavView..title" = "Adicione um `NavigationStack` ao app";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavView..Page80..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavView..Page80..Paragraph152" = "Para mostrar várias visualizações no app, você transformará a [visualização de nível superior](glossary://top-level%20view) em um [NavigationStack](doc://com.apple.documentation/documentation/swiftui/navigationstack).";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavView..Page81..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavView..Page81..Paragraph153" = "Adicione um `NavigationStack` dentro de `SPCAssessableWindowGroup` do `body` do app:";

/*  */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavView..Page81..CodeBlock29" = "NavigationStack { \n\n}\n//#-learning-code-snippet(environmentObjectModifier)\n";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavView..Page82..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavView..Page82..Paragraph154" = "Coloque a `ContentView` dentro do `NavigationStack`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavView..Page82..Paragraph155" = "A primeira visualização colocada dentro do `NavigationStack` mostra o conteúdo inicial. Esse conteúdo pode mudar sempre que você usar um [link de navegação](glossary://navigation%20link) para mostrar uma nova visualização.";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavView..Page83..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavView..Page83..Paragraph156" = "O `body` do app ficou assim:";

/*  */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavView..Page83..CodeBlock30" = "SPCAssessableWindowGroup(app: self, assessmentCandidates: [CreatureZoo()]) { \n   NavigationStack { \n       ContentView()\n   }\n}\n";

/* Title for task */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavTitle..title" = "Adicione um título de navegação";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavTitle..Page84..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavTitle..Page84..Paragraph157" = "Execute o app. Ele não parece muito diferente, não é mesmo? Isso acontece porque o `NavigationStack` funciona como um contêiner para mostrar o conteúdo por padrão.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavTitle..Page84..Paragraph158" = "No entanto, um `NavigationStack` fornece um espaço dedicado, conhecido como [barra de navegação](glossary://navigation%20bar), que pode mostrar o título da visualização atual, assim como mostrar vários itens da barra de ferramentas.";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavTitle..Page85..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavTitle..Page85..Paragraph159" = "Experimente adicionar `.navigationTitle(\"My Creatures\")` como um modificador em `ContentView`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavTitle..Page85..Paragraph160" = "Isso dá à visualização um título na área da barra de navegação. Você adiciona o título de navegação a cada visualização dentro da visualização de navegação, em vez de adicioná‑lo na própria visualização de navegação.";

/*  */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavTitle..Page85..CodeBlock31" = ".navigationTitle(\"My Creatures\")\n";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavTitle..Page86..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavTitle..Page86..Paragraph161" = "Reparou como o título de navegação aparece na barra de navegação na parte superior da `ContentView`? Esses títulos ajudam uma pessoa usando o app a entender o conteúdo sendo exibido.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavTitle..Page86..Paragraph162" = "Em seguida, você adicionará um [NavigationLink](glossary://navigation%20link) à `ContentView` para navegar até a visualização `CreatureDance`.";

/* Title for task */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLinkCreatureDance..title" = "Adicione um `NavigationLink` a `CreatureList`";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLinkCreatureDance..Page87..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLinkCreatureDance..Page87..Paragraph163" = "Adicione um link com o destino de `CreatureDance` dentro da visualização `Section(\"Dance\")` Use a etiqueta e o título de navegação para descrever o que a visualização faz (neste caso, ela faz com que algumas criaturas dancem!).";

/* title for page */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLinkCreatureDance..Page88..title" = "";

/*  */
"GuideBook..Guide0..StepNavigating in SwiftUI..TaskaddNavLinkCreatureDance..Page88..CodeBlock32" = "NavigationLink(\"Make the Creatures Dance\") { \n    DancingCreatures()\n        .navigationTitle(\"Dancing Creatures\")\n}\n";

/* Contents of success message */
"GuideBook..Guide0..StepNavigating in SwiftUI..SuccessMessage..message" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..SuccessMessage..Paragraph164" = "Parabéns! Adicionar navegação é uma parte essencial da criação de um app.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..SuccessMessage..Paragraph165" = "Lembre-se de que quando você usa um `NavigationLink`, ele só funciona se a visualização da qual você está navegando estiver dentro de um `NavigationStack` ou uma `NavigationSplitView`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepNavigating in SwiftUI..SuccessMessage..Paragraph166" = "A seguir, você aprenderá a compartilhar dados entre todas as visualizações do app.";

/* Title of step named Sharing Data Between Views */
"GuideBook..Guide0..StepSharing Data Between Views..title" = "Compartilhando Dados Entre Visualizações";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..LearningCenterContent..Paragraph167" = "![](SharingDataBetweenViews.png)";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..LearningCenterContent..Paragraph168" = "Anteriormente, você aprendeu a armazenar dados [localmente](glossary://local%20scope) usando uma [propriedade de estado](glossary://state%20value), e entre duas visualizações usando um [vínculo](glossary://binding). E se você quiser compartilhar dados em um app que tem várias visualizações, como o que você tem agora?";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..LearningCenterContent..Paragraph169" = "Para compartilhar os mesmos dados entre várias visualizações, você precisa de uma única fonte da verdade que seja [separada](glossary://data%20separation) das visualizações. Isto é o [modelo de dados](glossary://data%20model), que você pode compartilhar com quaisquer visualizações que precisem de acesso aos dados.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..LearningCenterContent..Paragraph170" = "Uma maneira comum de construir um modelo de dados para um app de SwiftUI é usar um [objeto observável](glossary://observable%20object). Um objeto observável é um [tipo](glossary://type) com propriedades que várias visualizações podem [observar](glossary://observe). Essas visualizações podem observar alterações de estado nas propriedades, permitindo que elas atualizem suas IUs para permanecerem em sincronia.";

/* Title for task */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreatureZoo..title" = "O modelo de dados";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreatureZoo..Page89..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreatureZoo..Page89..Paragraph171" = "Este é o seu modelo de dados: o [objeto observável](glossary://observable%20object) `CreatureZoo`. Ele é uma [classe](glossary://class) que segue as orientações do [protocolo](glossary://protocol) `ObservableObject`. Isso permite que a classe [publique](glossary://publish) certas propriedades.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreatureZoo..Page89..Paragraph172" = "Quando uma classe publica uma propriedade, a propriedade transmite (publica) suas alterações de estado para todos os [observadores](glossary://observer) que possam estar vendo. Isso permite que as visualizações que estejam [observando](glossary://observer) atualizem quando o estado de uma propriedade publicada muda.";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreatureZoo..Page90..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreatureZoo..Page90..Paragraph173" = "O [dado publicado](glossary://published%20value) em `CreatureZoo` é a propriedade `creatures` — um vetor de instâncias de `Creature`. Sempre que os dados nesse vetor mudam, como ao adicionar ou remover uma criatura, a SwiftUI notifica todos os [observadores](glossary://observer) da propriedade, para que eles possam se atualizar para mostrar os dados mais recentes.";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreatureZoo..Page91..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreatureZoo..Page91..Paragraph174" = "Em um objeto observável, você adiciona o [empacotador de propriedade](glossary://property%20wrapper) `@Published` para marcar uma propriedade como [publicada](glossary://published%20value).";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreatureZoo..Page92..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreatureZoo..Page92..Paragraph175" = "Para criar uma instância de criatura, use o inicializador `Creature(name:emoji:)` e passe um nome, bem como um único caractere de emoji.";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreatureZoo..Page93..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreatureZoo..Page93..Paragraph176" = "Esse é o tipo `Creature`, que contém as [propriedades](glossary://property) `name`, `emoji`, `offset`, `rotation` e `id`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreatureZoo..Page93..Paragraph177" = "`Creature` segue as orientações do [protocolo](glossary://protocol) `Identifiable` ao adicionar uma propriedade `id`. Esse protocolo permite que a SwiftUI identifique de maneira exclusiva qualquer `Creature`, mesmo se duas criaturas usarem o mesmo emoji. Isso será muito útil futuramente.";

/* Title for task */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddCreatures..title" = "Adicione mais criaturas";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddCreatures..Page94..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddCreatures..Page94..Paragraph178" = "Adicione ao menos duas instâncias `Creature` novas ao vetor `creatures`.";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddCreatures..Page95..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddCreatures..Page95..Paragraph179" = "Para criar uma nova criatura, dê um nome a ela e passe um único caractere de emoji para [inicializá-la](glossary://initialization). Ao adicionar criaturas ao vetor, separe os dados de cada criatura com uma vírgula, por exemplo:";

/*  */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddCreatures..Page95..CodeBlock33" = "Creature(name: \"T-Rex\", emoji: \"🦖\"),\n";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddCreatures..Page96..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddCreatures..Page96..Paragraph180" = "Adicione ao menos mais uma criatura ao vetor.";

/*  */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddCreatures..Page96..CodeBlock34" = "Creature(name: \"Joaninha”, emoji: \"🐞&quot,\n";

/* Title for task */
"GuideBook..Guide0..StepSharing Data Between Views..TaskusingCreatureZoo..title" = "Crie um `StateObject`";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskusingCreatureZoo..Page97..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskusingCreatureZoo..Page97..Paragraph181" = "Antes de compartilhar o [objeto observável](glossary://observable%20object) pelas visualizações, explore como é usar o modelo de dados em uma única visualização.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskusingCreatureZoo..Page97..Paragraph182" = "Em `ContentView`, inicialize o seu objeto observável e crie uma lista de visualizações de criatura com os dados.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskusingCreatureZoo..Page97..Paragraph183" = "Para inicializar um objeto observável como `CreatureZoo`, use um empacotador de propriedades especial, `@StateObject`, para que a SwiftUI possa gerenciar os dados.";

/*  */
"GuideBook..Guide0..StepSharing Data Between Views..TaskusingCreatureZoo..Page97..CodeBlock35" = "@StateObject var data = CreatureZoo()\n";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskusingCreatureZoo..Page98..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskusingCreatureZoo..Page98..Paragraph184" = "Use o empacotador de propriedade `@StateObject` para ordenar que a SwiftUI gerencie o objeto observável, similar a como você usa `@State` para que a SwiftUI gerencie uma propriedade em uma visualização como uma [propriedade de estado](glossary://state%20property).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskusingCreatureZoo..Page98..Paragraph185" = "Neste caso, você está inicializando o objeto observável `CreatureZoo` e pedindo à SwiftUI para gerenciá-lo como um [objeto de estado](glossary://state%20object).";

/* Title for task */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreateAList..title" = "Use o modelo de dados em uma visualização";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreateAList..Page99..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreateAList..Page99..Paragraph186" = "Depois de inicializar os dados, você os usará para criar uma visualização básica. Você adicionará uma visualização [ForEach](glossary://ForEach) dentro de `List` para mostrar cada uma das criaturas verticalmente em um layout de colunas.";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreateAList..Page100..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreateAList..Page100..Paragraph187" = "[ForEach](glossary://ForEach) é uma estrutura que [itera](glossary://iteration) sobre uma [coleção](glossary://collection) de dados (como um vetor) para criar visualizações para cada elemento na coleção.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreateAList..Page100..Paragraph188" = "Adicione `ForEach` abaixo da visualização `Section` para iterar no vetor `data.creatures`, criando uma visualização personalizada para mostrar o nome e o emoji de cada criatura:";

/*  */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreateAList..Page100..CodeBlock36" = "/*#-code-walkthrough(forEach.id)*/\nForEach(data.creatures) { creature in \n/*#-code-walkthrough(forEach.id)*/\n    HStack { \n        Text(creature.name)\n            .font(.title)\n        Spacer()\n        Text(creature.emoji)\n            /*#-code-walkthrough(resizableFont)*/\n            .resizableFont()\n            /*#-code-walkthrough(resizableFont)*/\n            .frame(minWidth: 125)\n    }\n}\n";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreateAList..Page101..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreateAList..Page101..Paragraph189" = "Você se lembra que `Creature` segue as orientações do protocolo `Identifiable`? Isso permite que a estrutura [ForEach](glossary://ForEach) identifique exclusivamente cada criatura, mesmo que elas tenham exatamente o mesmo caractere de emoji e nome. Por ser capaz de distinguir até mesmo gêmeos idênticos, isso permite que a SwiftUI atualize cada visualização independentemente, sem confundi‑las.";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreateAList..Page102..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskcreateAList..Page102..Paragraph190" = "Talvez você tenha notado o modificador `.resizableFont()` usado aqui. Este é um modificador personalizado, definido em `ResizableFont.swift` para permitir que o tamanho da fonte da visualização `Text` seja aumentado para se ajustar ao tamanho da visualização. Confira o código nesse arquivo para ver como criar um modificador personalizado.";

/* Title for task */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..title" = "Torne o modelo de dados acessível ao app inteiro";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page103..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page103..Paragraph191" = "Agora que você conseguiu usar com sucesso os dados do seu objeto observável em uma única visualização, é hora de compartilhar esses dados com todo o app a partir de `MyApp.swift`.";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page104..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page104..Paragraph192" = "Para tornar os dados acessíveis ao app inteiro:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page104..OrderedList6..Paragraph193" = "Crie uma instância de `CreatureZoo` como um [objeto de estado](glossary://state%20object) em `MyApp`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page104..OrderedList6..Paragraph194" = "Passe‑a para a [visualização de nível superior](glossary://top-level%20view), `NavigationStack`, como um [objeto de ambiente](glossary://environment%20object).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page104..Paragraph195" = "Ao passar os dados para a visualização de nível superior, o objeto de ambiente disponibiliza os dados para toda a [hierarquia de visualização](glossary://view%20hierarchy) para que todas as outras visualizações possam usá-los.";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page105..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page105..Paragraph196" = "Crie a instância de `CreatureZoo` da mesma maneira que você fez em `CreatureList`:";

/*  */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page105..CodeBlock37" = "@StateObject var data = CreatureZoo()\n";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page106..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page106..Paragraph197" = "Adicione o seguinte modificador abaixo do `NavigationStack`:";

/*  */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page106..CodeBlock38" = ".environmentObject(data)\n";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page106..Paragraph198" = "Isso passa a sua instância de [objeto observável](glossary://observable%20object) para o [ambiente](glossary://environment) do app, para que qualquer [subvisualização](glossary://subview) possa acessar.";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page107..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskaddModelData..Page107..Paragraph199" = "A seguir, você voltará a `ContentView.swift` para tentar usar o objeto de ambiente.";

/* Title for task */
"GuideBook..Guide0..StepSharing Data Between Views..TaskuseEnvironmentObject..title" = "Acesse um objeto de ambiente";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskuseEnvironmentObject..Page108..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskuseEnvironmentObject..Page108..Paragraph200" = "Agora que você compartilhou o objeto observável com todas as [subvisualizações](glossary://subview) do `NavigationStack`, incluindo `ContentView`, chegou a hora de acessar esses dados.";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskuseEnvironmentObject..Page109..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskuseEnvironmentObject..Page109..Paragraph201" = "Em vez de usar `@StateObject`, que cria uma nova instância de um objeto observável, você precisa acessar a instância passada para o [ambiente](glossary://environment) do app:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskuseEnvironmentObject..Page109..OrderedList7..Paragraph202" = "Apague a variável `@StateObject` atual, `data`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskuseEnvironmentObject..Page109..OrderedList7..Paragraph203" = "Para acessar o [objeto de ambiente](glossary://environment%20object) e criar uma nova propriedade com o empacotador de propriedades `@EnvironmentObject` do tipo `CreatureZoo`.";

/*  */
"GuideBook..Guide0..StepSharing Data Between Views..TaskuseEnvironmentObject..Page109..CodeBlock39" = "@EnvironmentObject var data : CreatureZoo\n";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskuseEnvironmentObject..Page110..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskuseEnvironmentObject..Page110..Paragraph204" = "Examine a lista de criaturas na pré-visualização de `ContentView`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskuseEnvironmentObject..Page110..Paragraph205" = "Note que as criaturas aparecem da mesma maneira que antes. Os dados na lista de criaturas são criados em `MyApp`, compartilhados através do [ambiente](glossary://environment) do app e acessados em `ContentView`.";

/* Title for task */
"GuideBook..Guide0..StepSharing Data Between Views..TaskreplaceHStackWithCreatureRow..title" = "Substitua `HStack` por uma visualização `CreatureRow` composta";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskreplaceHStackWithCreatureRow..Page111..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskreplaceHStackWithCreatureRow..Page111..Paragraph206" = "Aqui está uma grande oportunidade de melhorar o seu código. Você pode simplificar o código nesta visualização ao substituir todo o `HStack` dentro da estrutura [ForEach](glossary://ForEach) por uma [visualização composta](glossary://composed%20view), `CreatureRow`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskreplaceHStackWithCreatureRow..Page111..Paragraph207" = "Apague o conteúdo de `HStack` dentro de `ForEach` e substitua-o por `CreatureRow(creature: creature)`.";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskreplaceHStackWithCreatureRow..Page112..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskreplaceHStackWithCreatureRow..Page112..Paragraph208" = "Dê uma olhada em `CreatureRow.swift` — ele contém o mesmo código que você tinha em `ForEach`, exceto por uma [propriedade](glossary://property) que armazena um valor `Creature`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..TaskreplaceHStackWithCreatureRow..Page112..Paragraph209" = "Agora que você tem `CreatureRow` como sua própria visualização, é mais fácil modificar e testar separadamente de `ContentView`. Compor uma visualização como essa melhora a [modularidade](glossary://modularity) do seu código, um princípio fundamental da criação de apps.";

/* title for page */
"GuideBook..Guide0..StepSharing Data Between Views..TaskreplaceHStackWithCreatureRow..Page113..title" = "";

/*  */
"GuideBook..Guide0..StepSharing Data Between Views..TaskreplaceHStackWithCreatureRow..Page113..CodeBlock40" = "ForEach(data.creatures) { creature in \n   CreatureRow(creature: creature)\n}\n";

/* Contents of success message */
"GuideBook..Guide0..StepSharing Data Between Views..SuccessMessage..message" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..SuccessMessage..Paragraph210" = "Legal!";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepSharing Data Between Views..SuccessMessage..Paragraph211" = "Ao passar um objeto observável para dentro do ambiente do app, você dá acesso a esses dados para toda a [hierarquia de visualização](glossary://view%20hierarchy). Isso permite que qualquer outra visualização do app use a mesma [fonte da verdade](glossary://source%20of%20truth), em vez de tentar recriar dados em vários lugares.";

/* Title of step named Create a New View To Share Data */
"GuideBook..Guide0..StepCreate a New View To Share Data..title" = "Crie uma Nova Visualização para Compartilhar Dados";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..LearningCenterContent..Paragraph212" = "![](CreateANewViewToShareData.png)";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..LearningCenterContent..Paragraph213" = "Agora que você conseguiu compartilhar dados com uma visualização, está na hora de usar esses mesmos dados em outras visualizações.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..LearningCenterContent..Paragraph214" = "Para isso, você precisa de duas coisas:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..LearningCenterContent..OrderedList8..Paragraph215" = "Certifique-se de que a visualização que acessa os dados faça parte da mesma [hierarquia de visualização](glossary://view%20hierarchy) da visualização de nível superior para a qual foi passada. Para adicionar uma visualização à hierarquia de visualização, inicialize‑a dentro da [visualização de nível superior](glossary://top-level%20view) ou de qualquer de suas [subvisualizações](glossary://subview).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..LearningCenterContent..OrderedList8..Paragraph216" = "Acesse o [objeto de ambiente](glossary://environment%20object).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..LearningCenterContent..Paragraph217" = "Por exemplo, se você criar uma nova visualização dentro de `ContentView`, essa nova visualização fará parte da hierarquia de visualização, já que `ContentView` é uma subvisualização da visualização de nível superior, `NavigationStack`. Depois, você poderá acessar o objeto de ambiente a partir dessa nova visualização.";

/* Title for task */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesData..title" = "Declare o objeto de ambiente";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesData..Page114..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesData..Page114..Paragraph218" = "Seu objetivo é criar uma nova visualização, `DancingCreatures`, que acesse os dados no [ambiente](glossary://environment) do app.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesData..Page114..Paragraph219" = "`DancingCreatures` já faz parte da [hierarquia de visualização](glossary://view%20hierarchy); você adicionou um link para ela em `ContentView`. O próximo passo é acessar os dados no ambiente do app.";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesData..Page115..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesData..Page115..Paragraph220" = "Para acessar os dados no ambiente do app, declare o objeto de ambiente de `CreatureZoo` como você fez em `CreatureList`. Não há nenhum problema em consultar o outro código se você precisar de ajuda.";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesData..Page116..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesData..Page116..Paragraph221" = "[Declare](glossary://declaration) uma variável com o empacotador de propriedade `@EnvironmentObject` e atribua um tipo de `CreatureZoo`. Você não precisa [inicializar](glossary://initialization) o valor porque ele já está inicializado em `MyApp`. Você precisa apenas acessar os dados contidos aqui.";

/*  */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesData..Page116..CodeBlock41" = "@EnvironmentObject var data : CreatureZoo\n";

/* Title for task */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesView..title" = "Adicione uma visualização `DancingCreatures`";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesView..Page117..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesView..Page117..Paragraph222" = "Agora que você tem acesso aos dados do app, chegou a hora de criar algo divertido com isso. Primeiro, você empilhará todas as criaturas uma sobre a outra e, depois, sempre que tocar em uma delas, elas se espalharão em direções diferentes.";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesView..Page118..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesView..Page118..Paragraph223" = "Adicione este código dentro do `VStack`:";

/*  */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskdancingCreaturesView..Page118..CodeBlock42" = "ZStack {\n    /*#-code-walkthrough(dance.forEach)*/\n    ForEach(data.creatures) { creature in\n    /*#-code-walkthrough(dance.forEach)*/\n        /*#-code-walkthrough(dance.textView)*/\n        Text(creature.emoji)\n            .resizableFont()\n            .offset(creature.offset)\n            .rotationEffect(creature.rotation)\n        /*#-code-walkthrough(dance.textView)*/\n        //#-learning-code-snippet(exp1)\n        //#-learning-code-snippet(animationSolution)\n        //#-learning-code-snippet(exp3)\n\n    }\n}\n/*#-code-walkthrough(dance.onTap)*/\n.onTapGesture {\n    data.randomizeOffsets()\n}\n/*#-code-walkthrough(dance.onTap)*/\n";

/* Title for task */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimationWalkthrough..title" = "Entendendo o código de animação";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimationWalkthrough..Page119..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimationWalkthrough..Page119..Paragraph224" = "Para criar esta animação, um [ForEach](glossary://ForEach) itera em todas as criaturas em `CreatureZoo.creatures`, criando uma visualização `Text` para cada uma.";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimationWalkthrough..Page120..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimationWalkthrough..Page120..Paragraph225" = "A visualização `Text` usa as [propriedades](glossary://property) `offset` e `rotation` das criaturas como argumentos para os modificadores `.offset` e `.rotationEffect`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimationWalkthrough..Page120..Paragraph226" = "Como `CreatureZoo.creatures` é um [valor publicado](glossary://published%20value), a SwiftUI atualiza a visualização `DancingCreatures` sempre que o `offset` ou `rotation` de uma criatura muda.";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimationWalkthrough..Page121..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimationWalkthrough..Page121..Paragraph227" = "O modificador `.onTapGesture` executa um código sempre que a visualização é tocada. Quando tocada, `data.randomizeOffsets()` muda os valores de `offset` e `rotation` de cada criatura, permitindo que a visualização atualize cada criatura para uma nova localização e rotação.";

/* Title for task */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimateCreatures..title" = "Anime as criaturas";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimateCreatures..Page122..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimateCreatures..Page122..Paragraph228" = "Experimente tocar na visualização.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimateCreatures..Page122..Paragraph229" = "As criaturas estão se movendo, mas o visual não é muito interessante. A seguir, você as animará para suas novas posições com um clima mais dançante.";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimateCreatures..Page123..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimateCreatures..Page123..Paragraph230" = "Para animar as criaturas para uma nova posição, você precisa dizer à SwiftUI qual animação usar e qual o valor a ser animado. Neste caso, você quer animar a propriedade `offset` de cada criatura.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimateCreatures..Page123..Paragraph231" = "Anexe o modificador `.animation(_:value:)` à visualização `Text`. Escolha `.default` como argumento da animação e, como valor, passe `creature.offset`. Sempre que o `offset` for alterado, as alterações serão animadas na visualização.";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimateCreatures..Page124..title" = "";

/*  */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskanimateCreatures..Page124..CodeBlock43" = ".animation(.default, value: creature.offset)\n";

/* Title for task */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskexperimentWithAnimations..title" = "Experimente com a visualização";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskexperimentWithAnimations..Page125..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskexperimentWithAnimations..Page125..Paragraph232" = "Agora que você conseguiu animar as criaturas, tente ajustar as animações e outras partes da visualização para torná-la mais interessante.";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskexperimentWithAnimations..Page126..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskexperimentWithAnimations..Page126..Paragraph233" = "Para animar as alterações da propriedade `creature.rotation`, adicione um novo modificador `.animation(_:value:)`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskexperimentWithAnimations..Page126..Paragraph234" = "Adicione o modificador a seguir antes do modificador `.animation(_:value)`. Como isso muda a animação? Por que você acha que isso ocorre? O que acontece se você colocar a animação `.spring()` depois do modificador acima?";

/*  */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskexperimentWithAnimations..Page126..CodeBlock44" = ".animation(.spring(response: 0.5, dampingFraction: 0.5), value: creature.rotation)\n";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskexperimentWithAnimations..Page127..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskexperimentWithAnimations..Page127..Paragraph235" = "Altere o controlador de eventos de `.onTapGestures` para `data.synchronizeOffsets()`. Isso faz com que todas as criaturas se movam com o mesmo deslocamento.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskexperimentWithAnimations..Page127..OrderedList9..Paragraph236" = "Remova o modificador atual `.animation` para `creature.offset`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskexperimentWithAnimations..Page127..OrderedList9..Paragraph237" = "Adicione a animação seguinte para que cada uma das animações tenha um pequeno atraso.";

/*  */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskexperimentWithAnimations..Page127..CodeBlock45" = ".animation(.default.delay(data.indexFor(creature) / 10), value: creature.offset)\n";

/* title for page */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskexperimentWithAnimations..Page128..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..TaskexperimentWithAnimations..Page128..Paragraph238" = "Faça ajustes nos valores de animação até ficar contente com o resultado!";

/* Contents of success message */
"GuideBook..Guide0..StepCreate a New View To Share Data..SuccessMessage..message" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..SuccessMessage..Paragraph239" = "Bom trabalho!";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..SuccessMessage..Paragraph240" = "Você conseguiu criar mais uma visualização que usa o seu [modelo de dados](glossary://data%20model) observável compartilhado com a [hierarquia de visualizações](glossary://view%20hierarchy).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate a New View To Share Data..SuccessMessage..Paragraph241" = "A seguir, você aprenderá a adicionar e apagar dados desse modelo de dados para permitir que as pessoas possam personalizar o app.";

/* Title of step named Add and delete creatures */
"GuideBook..Guide0..StepAdd and delete creatures..title" = "Adicione e apague criaturas";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..LearningCenterContent..Paragraph242" = "![](AddAndDeleteCreatures.png)";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..LearningCenterContent..Paragraph243" = "Agora você tem um app com várias visualizações que compartilha um único [modelo de dados](glossary://data%20model) por diversas visualizações. Mas o app ainda não parece completo. Embora você possa adicionar ou apagar uma `Creature` no código, um [usuário](glossary://user) não pode adicionar ou apagar criaturas pela IU.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..LearningCenterContent..Paragraph244" = "Felizmente, isso é muito fácil de resolver. Como você tem acesso ao modelo de dados das visualizações, você pode fazer alterações ao modelo de dados quando uma pessoa interage com a IU. Primeiro, você aprenderá a apagar uma criatura, depois, você criará uma nova visualização que permitirá que as pessoas adicionem suas próprias criaturas.";

/* Title for task */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdeleteACreature..title" = "Apague uma Criatura";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdeleteACreature..Page129..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdeleteACreature..Page129..Paragraph245" = "A SwiftUI facilita muito o apagamento de dados de uma `List`. Para apagar uma criatura, adicione um modificador `.onDelete` ao loop `ForEach` em `ContentView`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdeleteACreature..Page129..Paragraph246" = "A adição do modificador `.onDelete` permite que você execute um código personalizado (um [encerramento](glossary://closure) de `action` quando uma pessoa decide apagar um item). O código de encerramento remove a criatura atual do [modelo de dados](glossary://data%20model) observável do app.";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdeleteACreature..Page130..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdeleteACreature..Page130..Paragraph247" = "Dentro do [encerramento](glossary://closure) `.onDelete`, você removerá a criatura atual. Para isso, chame `remove(atOffsets:)` e passe o valor `indexSet` do encerramento. Isso busca a criatura correspondente no vetor `creatures` com base na linha da lista que você escolheu apagar.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdeleteACreature..Page130..Paragraph248" = "Tente adicionar este modificador abaixo do loop `ForEach` e execute o app. Será que passar o dedo para a esquerda sobre uma criatura permite que você a apague?";

/*  */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdeleteACreature..Page130..CodeBlock46" = ".onDelete { indexSet in \n    data.creatures.remove(atOffsets: indexSet)\n}\n";

/* Title for task */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..title" = "Adicione um `NavigationLink` a `CreatureEditor`";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page131..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page131..Paragraph249" = "Para adicionar uma nova criatura, você precisa fazer duas coisas:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page131..OrderedList10..Paragraph250" = "Adicione `CreatureEditor` à [hierarquia de visualizações](glossary://view%20hierarchy) com um `NavigationLink`. Isso permite que `CreatureEditor` acesse o objeto de ambiente `CreatureZoo` e que uma pessoa navegue para a visualização.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page131..OrderedList10..Paragraph251" = "[Componha](glossary://composed%20view) a visualização `CreatureEditor` para permitir que uma pessoa edite e adicione uma nova criatura ao vetor `creatures` em `CreatureZoo`.";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page132..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page132..Paragraph252" = "Comece se decidindo sobre onde adicionar um `NavigationLink` a `CreatureEditor`. Como você já tem uma visualização `List` das criaturas que você pode apagar em `ContentView`, faz sentido adicionar uma criatura da mesma visualização.";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page133..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page133..Paragraph253" = "Para facilitar o acesso à edição de criaturas, coloque um link na [barra de navegação](glossary://navigation%20bar) na IU `ContentView` UI. Esse é o lugar perfeito para esse tipo de link, por ser um local familiar onde as pessoas procuram recursos adicionais do app.";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page134..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page134..Paragraph254" = "Para adicionar um botão à barra de navegação:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page134..OrderedList11..Paragraph255" = "Para adicionar a personalização de barra de navegação, anexe o modificador `.toolbar` à visualização `List`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page134..OrderedList11..Paragraph256" = "Dentro do encerramento `.toolbar`, adicione um `ToolbarItem`. Esse é um item que você pode colocar na barra de ferramentas.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page134..OrderedList11..Paragraph257" = "Adicione um `NavigationLink` a `CreatureEditor` dentro de `ToolbarItem`. Essa é a visualização que você vê na barra de navegação.";

/*  */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page134..CodeBlock47" = ".toolbar { \n    ToolbarItem { \n        // Adicionar NavigationLink a CreatureEditor\n\n    }\n}\n";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page135..title" = "";

/*  */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddToolBarContentView..Page135..CodeBlock48" = ".toolbar { \n    ToolbarItem { \n        NavigationLink(\"Add\") { \n            CreatureEditor()\n        }\n    }\n}\n";

/* Title for task */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddNavigationTitleCreatureEditor..title" = "Adicione um título de navegação a `CreatureEditor`";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddNavigationTitleCreatureEditor..Page136..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddNavigationTitleCreatureEditor..Page136..Paragraph258" = "Depois, dê um título de navegação a `CreatureEditor` que descreva o propósito da visualização.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddNavigationTitleCreatureEditor..Page136..OrderedList12..Paragraph259" = "Adicione um título de navegação à visualização `CreatureEditor`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddNavigationTitleCreatureEditor..Page136..OrderedList12..Paragraph260" = "Execute o app e teste a navegação para `CreatureEditor` a partir de `ContentView`.";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddNavigationTitleCreatureEditor..Page137..title" = "";

/*  */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddNavigationTitleCreatureEditor..Page137..CodeBlock49" = ".toolbar { \n    ToolbarItem { \n        NavigationLink(\"Add\") { \n            CreatureEditor()\n                .navigationTitle(\"Add Creature\")\n        }\n    }\n}\n";

/* Title for task */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineVariablesCreatureEditor..title" = "Defina os dados de `CreatureEditor`";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineVariablesCreatureEditor..Page138..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineVariablesCreatureEditor..Page138..Paragraph261" = "Para adicionar uma nova criatura, você criará um `CreatureEditor` de [visualização composta](glossary://composed%20view) que lhe permite editar uma criatura nova e adicioná-la ao [modelo de dados](glossary://data%20model).";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineVariablesCreatureEditor..Page139..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineVariablesCreatureEditor..Page139..Paragraph262" = "Reflita sobre quais [propriedades](glossary://property) você precisará em `CreatureEditor` para criar uma nova instância `Creature` e adicioná-la ao modelo de dados.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineVariablesCreatureEditor..Page139..OrderedList13..Paragraph263" = "Você vai precisar de uma propriedade `Creature` que você pode modificar dentro da visualização [local](glossary://local%20scope) do `CreatureEditor`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineVariablesCreatureEditor..Page139..OrderedList13..Paragraph264" = "Você precisará acessar o [objeto observável](glossary://observable%20object) `CreatureZoo` a partir do [ambiente](glossary://environment) para que você possa adicionar a instância de `Creature` a ele.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineVariablesCreatureEditor..Page139..Paragraph265" = "Tente criar duas propriedades que atinjam essas metas. Use as dicas a seguir caso não consiga sair do lugar.";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineVariablesCreatureEditor..Page140..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineVariablesCreatureEditor..Page140..Paragraph266" = "Primeiro, crie uma [propriedade de estado](glossary://state%20property) que armazene uma instância `Creature`. Você pode deixar os parâmetros `name` e `emoji` como strings vazias por enquanto.";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineVariablesCreatureEditor..Page141..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineVariablesCreatureEditor..Page141..Paragraph267" = "Em seguida, declare um [objeto de ambiente](glossary://environment%20object) do tipo `CreatureZoo` para acessar a instância do [objeto observável](glossary://observable%20object).";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineVariablesCreatureEditor..Page142..title" = "";

/*  */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineVariablesCreatureEditor..Page142..CodeBlock50" = "@State var newCreature : Creature = Creature(name: \"\", emoji: \"\")\n@EnvironmentObject var data : CreatureZoo \n";

/* Title for task */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineYourView..title" = "Crie um Formulário no CreatureEditor";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineYourView..Page143..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineYourView..Page143..Paragraph268" = "Para criar a visualização `CreatureEditor`, você pode usar uma visualização integrada `Form`, ótima para lidar com a entrada de dados.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineYourView..Page143..Paragraph269" = "Dentro de `Form`, você adicionará três visualizações `Section`: cada qual para editar o nome, emoji e pré‑visualização da criatura.";

/*  */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdefineYourView..Page143..CodeBlock51" = "Form {\n    Section(\"Name\") {\n        //#-learning-code-snippet(addACreatureEditorTextField)\n\n    }   \n\n    Section(\"Emoji\") {\n        \n    }\n\n    Section(\"Creature Preview\") {\n        CreatureRow(creature: newCreature)\n    }\n}\n";

/* Title for task */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddACreatureEditorTextField..title" = "Adicione visualizações TextField para entrada do usuário";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddACreatureEditorTextField..Page144..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddACreatureEditorTextField..Page144..Paragraph270" = "Depois, você precisa adicionar uma maneira para que as [pessoas](glossary://user) editem os valores de `name` e `emoji` da [propriedade de estado](glossary://state%20property) `Creature`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddACreatureEditorTextField..Page144..Paragraph271" = "Para fazer isso, adicione uma visualização [TextField](doc://com.apple.documentation/documentation/swiftui/textfield), que permite que as pessoas digitem um texto.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddACreatureEditorTextField..Page144..Paragraph272" = "Adicione duas visualizações `TextField` para editar os valores de `name` e `emoji` da criatura. Use o inicializador `TextField(_:text:)` que aceita argumentos para uma [etiqueta](glossary://label) e um valor de `String` de [vínculo](glossary://binding).";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddACreatureEditorTextField..Page145..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddACreatureEditorTextField..Page145..Paragraph273" = "Lembre-se de que um vínculo requer que a fonte da verdade seja gerenciada pela SwiftUI, como em uma [propriedade de estado](glossary://state%20property).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddACreatureEditorTextField..Page145..Paragraph274" = "Passe um vínculo para a propriedade de estado `Creature` e especifique os valores de `name` e `emoji` assim:";

/*  */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddACreatureEditorTextField..Page145..CodeBlock52" = "$newCreature.name\n$newCreature.emoji\n";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddACreatureEditorTextField..Page146..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddACreatureEditorTextField..Page146..Paragraph275" = "Aqui está um exemplo de como adicionar um `TextField`. Adicione um `TextField` para editar `newCreature.name` e outro para editar `newCreature.emoji`.";

/*  */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddACreatureEditorTextField..Page146..CodeBlock53" = "TextField(\"Name\", text: $newCreature.name)\n";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddACreatureEditorTextField..Page147..title" = "";

/*  */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddACreatureEditorTextField..Page147..CodeBlock54" = "Form {\n    Section(\"Name\") {\n        TextField(\"Name\", text: $newCreature.name)\n    }   \n\n    Section(\"Emoji\") {\n        TextField(\"Emoji\", text: $newCreature.emoji)\n    }\n\n    Section(\"Creature Preview\") {\n        CreatureRow(creature: newCreature)\n    }\n}\n";

/* Title for task */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddButtonToToolbar..title" = "Coloque um botão adicionar na barra de ferramentas";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddButtonToToolbar..Page148..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddButtonToToolbar..Page148..Paragraph276" = "Depois, você precisa adicionar um `Button` que as pessoas possam tocar para adicionar uma nova criatura.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddButtonToToolbar..Page148..Paragraph277" = "Da mesma forma como em `ContentView`, o melhor lugar para colocar um botão como este é na [barra de navegação](glossary://navigation%20bar) do `CreatureEditor`.";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddButtonToToolbar..Page149..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddButtonToToolbar..Page149..Paragraph278" = "Tente usar o código `.toolbar` de `ContentView` como um exemplo de como adicionar uma barra de ferramentas a `CreatureEditor`:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddButtonToToolbar..Page149..OrderedList14..Paragraph279" = "Adicione o modificador `.toolbar` abaixo de `VStack`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddButtonToToolbar..Page149..OrderedList14..Paragraph280" = "Dentro da barra de ferramentas, adicione um `ToolbarItem`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddButtonToToolbar..Page149..OrderedList14..Paragraph281" = "Dentro de `ToolbarItem`, adicione um `Button` com uma [etiqueta](glossary://label) com a palavra “Adicionar”. Por enquanto, você pode deixar o [encerramento](glossary://closure) da ação do `Button` vazio.";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddButtonToToolbar..Page150..title" = "";

/*  */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddButtonToToolbar..Page150..CodeBlock55" = ".toolbar { \n    ToolbarItem { \n        Button(\"Adicionar\") { \n            //#-learning-code-snippet(addCreatureToCreatureZoo)\n            //#-learning-code-snippet(dismissCall)\n        }\n    }\n}\n";

/* Title for task */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddCreatureToCreatureZoo..title" = "Adicione a criatura a `CreatureZoo`";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddCreatureToCreatureZoo..Page151..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddCreatureToCreatureZoo..Page151..Paragraph282" = "Ao tocar no botão Adicionar, você quer adicionar a instância da criatura ao objeto observável `CreatureZoo`. Especificamente, você precisa afixar a criatura ao vetor `creatures`.";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddCreatureToCreatureZoo..Page152..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddCreatureToCreatureZoo..Page152..Paragraph283" = "O código a seguir adiciona a criatura que está sendo editada a `data.creatures`. Lembre-se, como `creatures` é um [valor publicado](glossary://published%20value), qualquer alteração a esse valor faz com que as visualizações que usam esses dados sejam atualizadas automaticamente.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddCreatureToCreatureZoo..Page152..Paragraph284" = "Adicione este código dentro da ação [encerramento](glossary://closure) para seu `Button`.";

/*  */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddCreatureToCreatureZoo..Page152..CodeBlock56" = "data.creatures.append(newCreature)\n";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddCreatureToCreatureZoo..Page153..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddCreatureToCreatureZoo..Page153..Paragraph285" = "Execute o app e tente adicionar uma nova criatura.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskaddCreatureToCreatureZoo..Page153..Paragraph286" = "Navegue de volta à`ContentView` para ver se a nova criatura foi adicionada à visualização `List`. Será que ela foi adicionada também à visualização `DancingCreatures`?";

/* Title for task */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdismissEditor..title" = "Feche o editor ao tocar em Adicionar";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdismissEditor..Page154..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdismissEditor..Page154..Paragraph287" = "Depois de adicionar uma criatura, a visualização `CreatureEditor` é fechada, mostrando a visualização anterior a partir da qual você navegou. Isso oferece uma experiência de usuário melhor e evita que você pressione o botão Adicionar mais de uma vez, o que apenas adicionaria a mesma criatura repetidamente.";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdismissEditor..Page155..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdismissEditor..Page155..Paragraph288" = "Para fechar a visualização, você precisa de duas coisas:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdismissEditor..Page155..OrderedList15..Paragraph289" = "Declare o valor de [ambiente](glossary://environment) `dismiss`, que permite que o app ignore a visualização atual apresentada em `NavigationStack`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdismissEditor..Page155..OrderedList15..Paragraph290" = "[Chame](glossary://call) `dismiss()` ao tocar no botão Adicionar.";

/*  */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdismissEditor..Page155..CodeBlock57" = "@Environment(\\.dismiss) var dismiss\n";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdismissEditor..Page156..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdismissEditor..Page156..Paragraph291" = "Depois de declarar o valor de [ambiente](glossary://environment) como `dismiss`, chame `dismiss()` ao tocar em Adicionar, depois de adicionar a nova criatura a `data.creatures`.";

/*  */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdismissEditor..Page156..CodeBlock58" = "dismiss()\n";

/* title for page */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdismissEditor..Page157..title" = "";

/*  */
"GuideBook..Guide0..StepAdd and delete creatures..TaskdismissEditor..Page157..CodeBlock59" = ".toolbar { \n    ToolbarItem { \n        Button(\"Adicionar\") { \n            data.creatures.append(newCreature)\n            dismiss()\n        }\n    }\n}\n";

/* Contents of success message */
"GuideBook..Guide0..StepAdd and delete creatures..SuccessMessage..message" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..SuccessMessage..Paragraph292" = "Parabéns, você criou um app totalmente funcional!";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd and delete creatures..SuccessMessage..Paragraph293" = "Você é capaz de adicionar novas criaturas, visualizar e editá‑las em `CreatureList`, e assisti‑las dançando em `DancingCreatures`.";

/* Title of step named Add a `CreatureDetail` view */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..title" = "Adicione uma visualização `CreatureDetail`";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..LearningCenterContent..Paragraph294" = "![](AddCreatureDetailView.png)";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..LearningCenterContent..Paragraph295" = "Agora que você sabe navegar entre visualizações, gerenciar alterações de estado [locais](glossary://local%20scope), compartilhar dados por todo o app e usar diversas [visualizações integradas de SwiftUI](glossary://built-in%20view), chegou o momento de colocar suas habilidades à prova e criar uma nova visualização: `CreatureDetail`, uma visualização que mostra os detalhes de um única criatura na lista.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..LearningCenterContent..Paragraph296" = "A sua lista de criaturas é notável, mas precisa de um pouco mais de interatividade. Para que serve ter tantas criaturas se não é possível mexer nelas?";

/* Title for task */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..title" = "Adicione um `NavigationLink` a `CreatureDetail`";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..Page158..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..Page158..Paragraph297" = "Seu objetivo é criar todas as visualizações do loop [ForEach](glossary://ForEach) dentro do seu próprio `NavigationLink`, e que cada um navegue para uma visualização detalhada de uma criatura no vetor `data.creatures`.";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..Page159..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..Page159..Paragraph298" = "Para fazer isso, substitua os conteúdos atuais do loop `ForEach` por um `NavigationLink`:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..Page159..OrderedList16..Paragraph299" = "Defina o [destino](glossary://destination%20view) para ser a [visualização composta](glossary://composed%20view) `CreatureDetail(creature: creature)`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..Page159..OrderedList16..Paragraph300" = "Crie a [etiqueta](glossary://label) como uma `CreatureRow` usando o valor `creature` do [encerramento](glossary://closure) como [argumento](glossary://argument).";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..Page160..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..Page160..Paragraph301" = "Crie um link de navegação como este e adicione‑o dentro do `ForEach`:";

/*  */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..Page160..CodeBlock60" = "NavigationLink {\n    CreatureDetail(creature: creature)\n        .navigationTitle(creature.name)\n} label: {\n    CreatureRow(creature: creature)\n}\n";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..Page161..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..Page161..Paragraph302" = "O `ForEach` deve ser mais ou menos assim:";

/*  */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..Page161..CodeBlock61" = "ForEach(data.creatures) { creature in \n    NavigationLink {\n        CreatureDetail(creature: creature)\n            .navigationTitle(creature.name)\n    } label: {\n        CreatureRow(creature: creature)\n    }  \n}\n";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..Page162..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddNavigationLinkCreatureDetail..Page162..Paragraph303" = "Tente tocar em uma linha de `List`. Isso leva você para a visualização `CreatureDetail` dessa criatura.";

/* Title for task */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..title" = "Crie a visualização `CreatureDetail`";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page163..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page163..Paragraph304" = "A visualização `CreatureDetail` mostra a criatura selecionada como uma visualização `Text`. A sua tarefa é entender o código existente e, com base nele, criar alguns efeitos interessantes para a criatura.";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page164..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page164..Paragraph305" = "Em `ContentView`, você criou um`NavigationLink` com uma [visualização de destino](glossary://destination%20view) de `CreatureDetail(creature: creature)`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page164..Paragraph306" = "A visualização de destino usa o valor de `Creature` para cada linha da lista para gerar uma visualização diferente, dependendo de qual criatura for tocada. Aqui, esse valor está armazenado como uma [constante](glossary://constant) sem estado porque o valor não muda nesta visualização.";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page165..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page165..Paragraph307" = "Três [propriedades de estado](glossary://state%20property) foram definidas para você:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page165..OrderedList17..Paragraph308" = "`color` rastreia um valor de `Color` e controla as modificações de cor da visualização `Text`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page165..OrderedList17..Paragraph309" = "`shadowRadius` é um valor `Double` que você usa para controlar o raio de um modificador `.shadow`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page165..OrderedList17..Paragraph310" = "`angle` é um valor de `Angle` que você usa para girar a visualização `Text`.";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page166..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page166..Paragraph311" = "A visualização `Text` usa `creature.emoji` como valor de String para a visualização e adiciona vários modificadores que determinam a aparência e o comportamento da visualização:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page166..OrderedList18..Paragraph312" = "[.colorMultiply](doc://com.apple.documentation/documentation/swiftui/list/colormultiply(_:)) adiciona um efeito de multiplicação de cor à visualização.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page166..OrderedList18..Paragraph313" = "[.shadow](doc://com.apple.documentation/documentation/swiftui/list/shadow(color:radius:x:y:)) adiciona uma sobra com cor e raio especificados.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcreatureDetailWalkthrough..Page166..OrderedList18..Paragraph314" = "[.rotation3DEffect](doc://com.apple.documentation/documentation/swiftui/view/rotation3deffect(_:axis:anchor:anchorz:perspective:)) pode controlar a rotação da visualização em três dimensões.";

/* Title for task */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddColorPicker..title" = "Adicione um `ColorPicker` que altere o valor `color`";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddColorPicker..Page167..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddColorPicker..Page167..Paragraph315" = "Para começar a criar alguma interação nesta visualização, primeiro adicione uma visualização `ColorPicker` abaixo da visualização `Text`. Isso altera a propriedade de estado `color` quando uma nova cor é escolhida.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddColorPicker..Page167..Paragraph316" = "Tente fazer isso e use a solução caso não consiga sair do lugar.";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddColorPicker..Page168..title" = "";

/*  */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddColorPicker..Page168..CodeBlock62" = "ColorPicker(\"Choose a Color\", selection: $color)\n";

/* Title for task */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddSliderShadowRadius..title" = "Adicione um `Slider` que controle o raio da sombra";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddSliderShadowRadius..Page169..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddSliderShadowRadius..Page169..Paragraph317" = "Abaixo de `ColorPicker`, adicione um `Slider` que controle o valor `shadowRadius`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddSliderShadowRadius..Page169..Paragraph318" = "Tente fazer isso e use a solução caso não consiga sair do lugar.";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddSliderShadowRadius..Page170..title" = "";

/*  */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddSliderShadowRadius..Page170..CodeBlock63" = "HStack { \n    Text(\"Sombra\")\n    Slider(value: $shadowRadius)\n}\n";

/* Title for task */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..title" = "Adicione um `Button` que altere o tamanho da criatura";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page171..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page171..Paragraph319" = "Abaixo do `Slider`, adicione um `Button` que as pessoas poderão usar para aumentar ou diminuir a visualização `Text`:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page171..OrderedList19..Paragraph320" = "Crie uma nova [propriedade de estado](glossary://state%20property) que rastreie um valor `Boolean`, da mesma maneira como você fez em `ConditionalCircle`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page171..OrderedList19..Paragraph321" = "Adicione um novo modificador, [.scaleEffect](doc://com.apple.documentation/documentation/swiftui/view/scaleeffect(_:anchor:)-pmi7) junto com um [operador condicional ternário](glossary://ternary%20conditional%20operator) para determinar a escala quando um Booleano é `true` em comparação a `false`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page171..OrderedList19..Paragraph322" = "Altere a ação do `Button` [encerramento](glossary://closure) para alternar o valor Booleano entre os estados `true` e `false`.";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page172..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page172..Paragraph323" = "Para realizar esta tarefa, olhe novamente o código em `ConditionalCircle`. Se precisar de ajuda, use as dicas a seguir:";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page173..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page173..Paragraph324" = "Crie uma [propriedade de estado](glossary://state%20property) fora da visualização [corpo](glossary://body) que rastreie um valor booleano.";

/*  */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page173..CodeBlock64" = "@State var isScaled = false\n";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page174..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page174..Paragraph325" = "Adicione o modificador `.scaleEffect` à visualização `Text` que controla a escala usando um [operador condicional ternário](glossary://ternary%20conditional%20operator).";

/*  */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page174..CodeBlock65" = ".scaleEffect(isScaled ? 1.5 : 1)\n";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page175..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page175..Paragraph326" = "Adicione o `Button` e defina sua ação para chamar `isScaled.toggle()`.";

/*  */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskaddScaleButton..Page175..CodeBlock66" = "Button(\"Scale\") { \n    isScaled.toggle()\n}\n";

/* Title for task */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskanimateChangesIsScaled..title" = "Anime as alterações em `isScaled`";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskanimateChangesIsScaled..Page176..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskanimateChangesIsScaled..Page176..Paragraph327" = "Esse efeito de escala ficou um pouco sem graça; não seria melhor se ele fosse animado?";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskanimateChangesIsScaled..Page176..Paragraph328" = "Use o modificador `.animation(_:value:)` para animar as suas alterações à variável `isScaled`. Tente usar a animação `.spring(response:dampingFraction:blendDuration:)` e passar um valor de `0.5` para cada parâmetro.";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskanimateChangesIsScaled..Page177..title" = "";

/*  */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskanimateChangesIsScaled..Page177..CodeBlock67" = ".animation(.spring(response: 0.5, dampingFraction: 0.5, blendDuration: 0.5), value: isScaled)\n";

/* Title for task */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskuseIsScaledRotateView..title" = "Use `isScaled` para Girar a Visualização";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskuseIsScaledRotateView..Page178..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskuseIsScaledRotateView..Page178..Paragraph329" = "Para acrescentar um toque final, crie um valor condicional em `.rotation3DEffect` no parâmetro `angle` do modificador e o defini como `Angle(degrees: 0)` se `isScaled` for `true` ou `Angle(degrees: 360)` se for `false`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskuseIsScaledRotateView..Page178..Paragraph330" = "Para fazer isso, você vai usar o [operador condicional ternário](glossary://ternary%20conditional%20operator).";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskuseIsScaledRotateView..Page179..title" = "";

/*  */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskuseIsScaledRotateView..Page179..CodeBlock68" = ".rotation3DEffect(isScaled ? Angle(degrees: 0) : Angle(degrees: 360), axis: (x: 5, y: 2, z: 1))\n";

/* Title for task */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcustomizeCreature..title" = "Personalize a visualização `CreatureDetail`";

/* title for page */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcustomizeCreature..Page180..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcustomizeCreature..Page180..Paragraph331" = "Agora que você pegou o jeito de personalizar visualizações com a [interação do usuário](glossary://user%20interaction), tente adicionar mais uma [visualização integrada](glossary://built-in%20view) para que as pessoas possam modificar a visualização `Text`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..TaskcustomizeCreature..Page180..Paragraph332" = "Você pode usar um `Slider` para alterar a largura, altura, desfoque, contraste ou saturação da visualização, um `Button` para ativar um `RotationEffect` ou algum outro efeito que você possa imaginar. Tente mexer por aí para ver quais efeitos você pode criar.";

/* Contents of success message */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..SuccessMessage..message" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..SuccessMessage..Paragraph333" = "Excelente Trabalho!";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..SuccessMessage..Paragraph334" = "Você criou um app completo que permite visualizar, adicionar, apagar, modificar criaturas e dançar com elas. Parabenize-se pois isso não foi uma tarefa fácil.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepAdd a `CreatureDetail` view..SuccessMessage..Paragraph335" = "Você concluiu este tutorial com sucesso, mas esse foi apenas o começo da sua jornada na criação de apps. Quanto mais você aplicar os conceitos aprendidos, melhor você se lembrará deles e mais apps poderá criar. Nos próximos experimentos, tente usar tudo o que você aprendeu neste tutorial para escrever alguns exemplos seus. Boa sorte!";

/* Title of step named Create on Your Own */
"GuideBook..Guide0..StepCreate on Your Own..title" = "Crie por Conta Própria";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate on Your Own..LearningCenterContent..Paragraph336" = "![](CreateYourOwnCopy.png)";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate on Your Own..LearningCenterContent..Paragraph337" = "Agora que você concluiu a jornada de aprendizado sobre estado e fluxo de dados, chegou a hora de soltar a criatividade para criar uma nova visualização que use os dados da criatura.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate on Your Own..LearningCenterContent..Paragraph338" = "Quando terminar todos os experimentos aqui, tente criar o seu próprio projeto desde o início com os mesmos conceitos que você aprendeu neste tutorial.";

/* Title for task */
"GuideBook..Guide0..StepCreate on Your Own..TaskcreateYourOwn..title" = "Crie sua Própria Visualização";

/* title for page */
"GuideBook..Guide0..StepCreate on Your Own..TaskcreateYourOwn..Page181..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate on Your Own..TaskcreateYourOwn..Page181..Paragraph339" = "Tente isto:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate on Your Own..TaskcreateYourOwn..Page181..UnorderedList0..Paragraph340" = "Crie uma nova visualização que use o vetor `creatures` e vincule‑o como um destino em `ContentView`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate on Your Own..TaskcreateYourOwn..Page181..UnorderedList0..Paragraph341" = "Adicione um novo [valor publicado](glossary://published%20value) a `CreatureZoo` e use‑o em uma ou mais das visualizações existentes.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate on Your Own..TaskcreateYourOwn..Page181..UnorderedList0..Paragraph342" = "Dê a cada criatura uma propriedade `description` e crie uma nova visualização mostre suas descrições, nomes e imagens em um layout divertido.";

/* Title for task */
"GuideBook..Guide0..StepCreate on Your Own..TaskcreateNewApp..title" = "Crie o seu próprio app";

/* title for page */
"GuideBook..Guide0..StepCreate on Your Own..TaskcreateNewApp..Page182..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCreate on Your Own..TaskcreateNewApp..Page182..Paragraph343" = "Imagine e crie um projeto inteiramente novo usando SwiftUI. Implemente seu próprio `NavigationStack` para mover entre as visualizações, use [propriedades de estado](glossary://state%20property) para alterar a aparência das visualizações localmente, use visualizações integradas de SwiftUI e [vínculos](glossary://binding) para permitir interações do usuário e um [objeto observável](glossary://observable%20object) passado para dentro do ambiente do app para compartilhar dados entre diversas visualizações. Se não conseguir sair do lugar, volte para este projeto e observe os exemplos de código para corrigir qualquer bug que você encontrar. Boa sorte, você consegue!";

